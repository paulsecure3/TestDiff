/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AgilelyGLPStakingInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "agilelyTreasury()": FunctionFragment;
    "applyNewFeeFlow()": FunctionFragment;
    "baseTreasuryFee()": FunctionFragment;
    "claim()": FunctionFragment;
    "enableStaticTreasuryFee(bool)": FunctionFragment;
    "fGLP()": FunctionFragment;
    "failedToSend()": FunctionFragment;
    "feeGlpTrackerRewards()": FunctionFragment;
    "forceExiting(address)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getRecoverableETH(address)": FunctionFragment;
    "getVaultOwnerClaimable(address)": FunctionFragment;
    "getVaultOwnerShare(address)": FunctionFragment;
    "getVaultStake(address)": FunctionFragment;
    "gmxRewardRouterV2()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "lastBalance()": FunctionFragment;
    "newFeeFlow()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "recoverETH()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrySendTreasuryFund()": FunctionFragment;
    "rewardShare()": FunctionFragment;
    "sGLP()": FunctionFragment;
    "setBaseTreasuryFee(uint256)": FunctionFragment;
    "setFeeGlpTrackerReward(address)": FunctionFragment;
    "setOperator(address,bool)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUp(address,address,address,address)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryFee()": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
    "useStaticFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "agilelyTreasury"
      | "applyNewFeeFlow"
      | "baseTreasuryFee"
      | "claim"
      | "enableStaticTreasuryFee"
      | "fGLP"
      | "failedToSend"
      | "feeGlpTrackerRewards"
      | "forceExiting"
      | "getBalance"
      | "getRecoverableETH"
      | "getVaultOwnerClaimable"
      | "getVaultOwnerShare"
      | "getVaultStake"
      | "gmxRewardRouterV2"
      | "isInitialized"
      | "isOperator"
      | "lastBalance"
      | "newFeeFlow"
      | "owner"
      | "priceFeed"
      | "recoverETH"
      | "renounceOwnership"
      | "retrySendTreasuryFund"
      | "rewardShare"
      | "sGLP"
      | "setBaseTreasuryFee"
      | "setFeeGlpTrackerReward"
      | "setOperator"
      | "setPriceFeed"
      | "setTreasury"
      | "setUp"
      | "stake"
      | "totalStaked"
      | "transferOwnership"
      | "treasuryFee"
      | "unstake"
      | "useStaticFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "agilelyTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyNewFeeFlow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enableStaticTreasuryFee",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "fGLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "failedToSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeGlpTrackerRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceExiting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoverableETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOwnerClaimable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOwnerShare",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gmxRewardRouterV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newFeeFlow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrySendTreasuryFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sGLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseTreasuryFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeGlpTrackerReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "useStaticFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agilelyTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyNewFeeFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableStaticTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fGLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "failedToSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeGlpTrackerRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceExiting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoverableETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOwnerClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOwnerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gmxRewardRouterV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newFeeFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrySendTreasuryFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sGLP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeGlpTrackerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "useStaticFee",
    data: BytesLike
  ): Result;

  events: {
    "FailedToSendETH(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardReceived(uint256)": EventFragment;
    "StakingUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FailedToSendETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingUpdated"): EventFragment;
}

export interface FailedToSendETHEventObject {
  to: string;
  _amount: BigNumber;
}
export type FailedToSendETHEvent = TypedEvent<
  [string, BigNumber],
  FailedToSendETHEventObject
>;

export type FailedToSendETHEventFilter = TypedEventFilter<FailedToSendETHEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RewardReceivedEventObject {
  reward: BigNumber;
}
export type RewardReceivedEvent = TypedEvent<
  [BigNumber],
  RewardReceivedEventObject
>;

export type RewardReceivedEventFilter = TypedEventFilter<RewardReceivedEvent>;

export interface StakingUpdatedEventObject {
  totalStaking: BigNumber;
}
export type StakingUpdatedEvent = TypedEvent<
  [BigNumber],
  StakingUpdatedEventObject
>;

export type StakingUpdatedEventFilter = TypedEventFilter<StakingUpdatedEvent>;

export interface AgilelyGLPStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgilelyGLPStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    agilelyTreasury(overrides?: CallOverrides): Promise<[string]>;

    applyNewFeeFlow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableStaticTreasuryFee(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fGLP(overrides?: CallOverrides): Promise<[string]>;

    failedToSend(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeGlpTrackerRewards(overrides?: CallOverrides): Promise<[string]>;

    forceExiting(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRecoverableETH(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultOwnerClaimable(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultOwnerShare(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultStake(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gmxRewardRouterV2(overrides?: CallOverrides): Promise<[string]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    newFeeFlow(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    recoverETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrySendTreasuryFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    sGLP(overrides?: CallOverrides): Promise<[string]>;

    setBaseTreasuryFee(
      _sharesBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeGlpTrackerReward(
      _feeTracker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _address: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      _agilelyTreasury: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _gmxRewardRouterV2: PromiseOrValue<string>,
      _feeGlpTrackerRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasuryFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeBPS_: BigNumber }>;

    unstake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    useStaticFee(overrides?: CallOverrides): Promise<[boolean]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  agilelyTreasury(overrides?: CallOverrides): Promise<string>;

  applyNewFeeFlow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableStaticTreasuryFee(
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fGLP(overrides?: CallOverrides): Promise<string>;

  failedToSend(overrides?: CallOverrides): Promise<BigNumber>;

  feeGlpTrackerRewards(overrides?: CallOverrides): Promise<string>;

  forceExiting(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRecoverableETH(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultOwnerClaimable(
    _vaultOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultOwnerShare(
    _vaultOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultStake(
    _vaultOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gmxRewardRouterV2(overrides?: CallOverrides): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isOperator(
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

  newFeeFlow(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  recoverETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrySendTreasuryFund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardShare(overrides?: CallOverrides): Promise<BigNumber>;

  sGLP(overrides?: CallOverrides): Promise<string>;

  setBaseTreasuryFee(
    _sharesBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeGlpTrackerReward(
    _feeTracker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _address: PromiseOrValue<string>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    _agilelyTreasury: PromiseOrValue<string>,
    _sGLP: PromiseOrValue<string>,
    _gmxRewardRouterV2: PromiseOrValue<string>,
    _feeGlpTrackerRewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _behalfOf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    _behalfOf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  useStaticFee(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    agilelyTreasury(overrides?: CallOverrides): Promise<string>;

    applyNewFeeFlow(overrides?: CallOverrides): Promise<void>;

    baseTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    enableStaticTreasuryFee(
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    fGLP(overrides?: CallOverrides): Promise<string>;

    failedToSend(overrides?: CallOverrides): Promise<BigNumber>;

    feeGlpTrackerRewards(overrides?: CallOverrides): Promise<string>;

    forceExiting(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoverableETH(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOwnerClaimable(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOwnerShare(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultStake(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmxRewardRouterV2(overrides?: CallOverrides): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    newFeeFlow(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    recoverETH(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrySendTreasuryFund(overrides?: CallOverrides): Promise<void>;

    rewardShare(overrides?: CallOverrides): Promise<BigNumber>;

    sGLP(overrides?: CallOverrides): Promise<string>;

    setBaseTreasuryFee(
      _sharesBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeGlpTrackerReward(
      _feeTracker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _address: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      _agilelyTreasury: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _gmxRewardRouterV2: PromiseOrValue<string>,
      _feeGlpTrackerRewards: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    useStaticFee(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "FailedToSendETH(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      _amount?: null
    ): FailedToSendETHEventFilter;
    FailedToSendETH(
      to?: PromiseOrValue<string> | null,
      _amount?: null
    ): FailedToSendETHEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RewardReceived(uint256)"(reward?: null): RewardReceivedEventFilter;
    RewardReceived(reward?: null): RewardReceivedEventFilter;

    "StakingUpdated(uint256)"(totalStaking?: null): StakingUpdatedEventFilter;
    StakingUpdated(totalStaking?: null): StakingUpdatedEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    agilelyTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    applyNewFeeFlow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableStaticTreasuryFee(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fGLP(overrides?: CallOverrides): Promise<BigNumber>;

    failedToSend(overrides?: CallOverrides): Promise<BigNumber>;

    feeGlpTrackerRewards(overrides?: CallOverrides): Promise<BigNumber>;

    forceExiting(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoverableETH(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOwnerClaimable(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOwnerShare(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultStake(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmxRewardRouterV2(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastBalance(overrides?: CallOverrides): Promise<BigNumber>;

    newFeeFlow(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    recoverETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrySendTreasuryFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardShare(overrides?: CallOverrides): Promise<BigNumber>;

    sGLP(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseTreasuryFee(
      _sharesBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeGlpTrackerReward(
      _feeTracker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _address: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      _agilelyTreasury: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _gmxRewardRouterV2: PromiseOrValue<string>,
      _feeGlpTrackerRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    useStaticFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agilelyTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyNewFeeFlow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseTreasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableStaticTreasuryFee(
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fGLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failedToSend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeGlpTrackerRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceExiting(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecoverableETH(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultOwnerClaimable(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultOwnerShare(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultStake(
      _vaultOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gmxRewardRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newFeeFlow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrySendTreasuryFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sGLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseTreasuryFee(
      _sharesBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeGlpTrackerReward(
      _feeTracker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _address: PromiseOrValue<string>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      _agilelyTreasury: PromiseOrValue<string>,
      _sGLP: PromiseOrValue<string>,
      _gmxRewardRouterV2: PromiseOrValue<string>,
      _feeGlpTrackerRewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      _behalfOf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    useStaticFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
