/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface HintHelpersInterface extends utils.Interface {
  functions: {
    "DECIMAL_PRECISION()": FunctionFragment;
    "ETH_REF_ADDRESS()": FunctionFragment;
    "NAME()": FunctionFragment;
    "aglParams()": FunctionFragment;
    "computeCR(uint256,uint256,uint256)": FunctionFragment;
    "computeNominalCR(uint256,uint256)": FunctionFragment;
    "getApproxHint(address,uint256,uint256,uint256)": FunctionFragment;
    "getEntireSystemColl(address)": FunctionFragment;
    "getEntireSystemDebt(address)": FunctionFragment;
    "getLiquidatableAmount(address,uint256)": FunctionFragment;
    "getRedemptionHints(address,uint256,uint256,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAGLParameters(address)": FunctionFragment;
    "setAddresses(address,address,address)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "sortedTroves()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "troveManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMAL_PRECISION"
      | "ETH_REF_ADDRESS"
      | "NAME"
      | "aglParams"
      | "computeCR"
      | "computeNominalCR"
      | "getApproxHint"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
      | "getLiquidatableAmount"
      | "getRedemptionHints"
      | "isInitialized"
      | "owner"
      | "priceFeed"
      | "renounceOwnership"
      | "setAGLParameters"
      | "setAddresses"
      | "setPriceFeed"
      | "sortedTroves"
      | "transferOwnership"
      | "troveManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_REF_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "aglParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "computeCR",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNominalCR",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproxHint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidatableAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionHints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAGLParameters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_REF_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aglParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "computeCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "computeNominalCR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproxHint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidatableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionHints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAGLParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "VaultParametersBaseChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultParametersBaseChanged"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _sortedTrovesAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _troveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface VaultParametersBaseChangedEventObject {
  newAddress: string;
}
export type VaultParametersBaseChangedEvent = TypedEvent<
  [string],
  VaultParametersBaseChangedEventObject
>;

export type VaultParametersBaseChangedEventFilter =
  TypedEventFilter<VaultParametersBaseChangedEvent>;

export interface HintHelpers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HintHelpersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    aglParams(overrides?: CallOverrides): Promise<[string]>;

    computeCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeNominalCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getApproxHint(
      _asset: PromiseOrValue<string>,
      _CR: PromiseOrValue<BigNumberish>,
      _numTrials: PromiseOrValue<BigNumberish>,
      _inputRandomSeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        hintAddress: string;
        diff: BigNumber;
        latestRandomSeed: BigNumber;
      }
    >;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    getLiquidatableAmount(
      _asset: PromiseOrValue<string>,
      _assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result_: BigNumber }>;

    getRedemptionHints(
      _asset: PromiseOrValue<string>,
      _USDAamount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        firstRedemptionHint: string;
        partialRedemptionHintNICR: BigNumber;
        truncatedUSDAamount: BigNumber;
      }
    >;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _sortedTrovesAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _vaultParametersAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<string>;

  NAME(overrides?: CallOverrides): Promise<string>;

  aglParams(overrides?: CallOverrides): Promise<string>;

  computeCR(
    _coll: PromiseOrValue<BigNumberish>,
    _debt: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeNominalCR(
    _coll: PromiseOrValue<BigNumberish>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproxHint(
    _asset: PromiseOrValue<string>,
    _CR: PromiseOrValue<BigNumberish>,
    _numTrials: PromiseOrValue<BigNumberish>,
    _inputRandomSeed: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      hintAddress: string;
      diff: BigNumber;
      latestRandomSeed: BigNumber;
    }
  >;

  getEntireSystemColl(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireSystemDebt(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLiquidatableAmount(
    _asset: PromiseOrValue<string>,
    _assetPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionHints(
    _asset: PromiseOrValue<string>,
    _USDAamount: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _maxIterations: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      firstRedemptionHint: string;
      partialRedemptionHintNICR: BigNumber;
      truncatedUSDAamount: BigNumber;
    }
  >;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAGLParameters(
    _vaultParams: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _sortedTrovesAddress: PromiseOrValue<string>,
    _troveManagerAddress: PromiseOrValue<string>,
    _vaultParametersAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<string>;

    NAME(overrides?: CallOverrides): Promise<string>;

    aglParams(overrides?: CallOverrides): Promise<string>;

    computeCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNominalCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproxHint(
      _asset: PromiseOrValue<string>,
      _CR: PromiseOrValue<BigNumberish>,
      _numTrials: PromiseOrValue<BigNumberish>,
      _inputRandomSeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        hintAddress: string;
        diff: BigNumber;
        latestRandomSeed: BigNumber;
      }
    >;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidatableAmount(
      _asset: PromiseOrValue<string>,
      _assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionHints(
      _asset: PromiseOrValue<string>,
      _USDAamount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        firstRedemptionHint: string;
        partialRedemptionHintNICR: BigNumber;
        truncatedUSDAamount: BigNumber;
      }
    >;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _sortedTrovesAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _vaultParametersAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    troveManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _troveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _troveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;

    "VaultParametersBaseChanged(address)"(
      newAddress?: PromiseOrValue<string> | null
    ): VaultParametersBaseChangedEventFilter;
    VaultParametersBaseChanged(
      newAddress?: PromiseOrValue<string> | null
    ): VaultParametersBaseChangedEventFilter;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    aglParams(overrides?: CallOverrides): Promise<BigNumber>;

    computeCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNominalCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproxHint(
      _asset: PromiseOrValue<string>,
      _CR: PromiseOrValue<BigNumberish>,
      _numTrials: PromiseOrValue<BigNumberish>,
      _inputRandomSeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidatableAmount(
      _asset: PromiseOrValue<string>,
      _assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionHints(
      _asset: PromiseOrValue<string>,
      _USDAamount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _sortedTrovesAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _vaultParametersAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aglParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeNominalCR(
      _coll: PromiseOrValue<BigNumberish>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproxHint(
      _asset: PromiseOrValue<string>,
      _CR: PromiseOrValue<BigNumberish>,
      _numTrials: PromiseOrValue<BigNumberish>,
      _inputRandomSeed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidatableAmount(
      _asset: PromiseOrValue<string>,
      _assetPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionHints(
      _asset: PromiseOrValue<string>,
      _USDAamount: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _maxIterations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _sortedTrovesAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _vaultParametersAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
