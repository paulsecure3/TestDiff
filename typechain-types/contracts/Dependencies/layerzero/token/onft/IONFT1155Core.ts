/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface IONFT1155CoreInterface extends utils.Interface {
  functions: {
    "estimateSendBatchFee(uint16,bytes,uint256[],uint256[],bool,bytes)": FunctionFragment;
    "estimateSendFee(uint16,bytes,uint256,uint256,bool,bytes)": FunctionFragment;
    "sendBatchFrom(address,uint16,bytes,uint256[],uint256[],address,address,bytes)": FunctionFragment;
    "sendFrom(address,uint16,bytes,uint256,uint256,address,address,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "estimateSendBatchFee"
      | "estimateSendFee"
      | "sendBatchFrom"
      | "sendFrom"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "estimateSendBatchFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendBatchFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateSendBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendBatchFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "ReceiveBatchFromChain(uint16,bytes,address,uint256[],uint256[])": EventFragment;
    "ReceiveFromChain(uint16,bytes,address,uint256,uint256)": EventFragment;
    "SendBatchToChain(uint16,address,bytes,uint256[],uint256[])": EventFragment;
    "SendToChain(uint16,address,bytes,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceiveBatchFromChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveFromChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendBatchToChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendToChain"): EventFragment;
}

export interface ReceiveBatchFromChainEventObject {
  _srcChainId: number;
  _srcAddress: string;
  _toAddress: string;
  _tokenIds: BigNumber[];
  _amounts: BigNumber[];
}
export type ReceiveBatchFromChainEvent = TypedEvent<
  [number, string, string, BigNumber[], BigNumber[]],
  ReceiveBatchFromChainEventObject
>;

export type ReceiveBatchFromChainEventFilter =
  TypedEventFilter<ReceiveBatchFromChainEvent>;

export interface ReceiveFromChainEventObject {
  _srcChainId: number;
  _srcAddress: string;
  _toAddress: string;
  _tokenId: BigNumber;
  _amount: BigNumber;
}
export type ReceiveFromChainEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber],
  ReceiveFromChainEventObject
>;

export type ReceiveFromChainEventFilter =
  TypedEventFilter<ReceiveFromChainEvent>;

export interface SendBatchToChainEventObject {
  _dstChainId: number;
  _from: string;
  _toAddress: string;
  _tokenIds: BigNumber[];
  _amounts: BigNumber[];
}
export type SendBatchToChainEvent = TypedEvent<
  [number, string, string, BigNumber[], BigNumber[]],
  SendBatchToChainEventObject
>;

export type SendBatchToChainEventFilter =
  TypedEventFilter<SendBatchToChainEvent>;

export interface SendToChainEventObject {
  _dstChainId: number;
  _from: string;
  _toAddress: string;
  _tokenId: BigNumber;
  _amount: BigNumber;
}
export type SendToChainEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber],
  SendToChainEventObject
>;

export type SendToChainEventFilter = TypedEventFilter<SendToChainEvent>;

export interface IONFT1155Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IONFT1155CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    estimateSendBatchFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    estimateSendFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    sendBatchFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  estimateSendBatchFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _toAddress: PromiseOrValue<BytesLike>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _useZro: PromiseOrValue<boolean>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  estimateSendFee(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _toAddress: PromiseOrValue<BytesLike>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _useZro: PromiseOrValue<boolean>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  sendBatchFrom(
    _from: PromiseOrValue<string>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _toAddress: PromiseOrValue<BytesLike>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _refundAddress: PromiseOrValue<string>,
    _zroPaymentAddress: PromiseOrValue<string>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendFrom(
    _from: PromiseOrValue<string>,
    _dstChainId: PromiseOrValue<BigNumberish>,
    _toAddress: PromiseOrValue<BytesLike>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _refundAddress: PromiseOrValue<string>,
    _zroPaymentAddress: PromiseOrValue<string>,
    _adapterParams: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    estimateSendBatchFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    estimateSendFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    sendBatchFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ReceiveBatchFromChain(uint16,bytes,address,uint256[],uint256[])"(
      _srcChainId?: PromiseOrValue<BigNumberish> | null,
      _srcAddress?: PromiseOrValue<BytesLike> | null,
      _toAddress?: PromiseOrValue<string> | null,
      _tokenIds?: null,
      _amounts?: null
    ): ReceiveBatchFromChainEventFilter;
    ReceiveBatchFromChain(
      _srcChainId?: PromiseOrValue<BigNumberish> | null,
      _srcAddress?: PromiseOrValue<BytesLike> | null,
      _toAddress?: PromiseOrValue<string> | null,
      _tokenIds?: null,
      _amounts?: null
    ): ReceiveBatchFromChainEventFilter;

    "ReceiveFromChain(uint16,bytes,address,uint256,uint256)"(
      _srcChainId?: PromiseOrValue<BigNumberish> | null,
      _srcAddress?: PromiseOrValue<BytesLike> | null,
      _toAddress?: PromiseOrValue<string> | null,
      _tokenId?: null,
      _amount?: null
    ): ReceiveFromChainEventFilter;
    ReceiveFromChain(
      _srcChainId?: PromiseOrValue<BigNumberish> | null,
      _srcAddress?: PromiseOrValue<BytesLike> | null,
      _toAddress?: PromiseOrValue<string> | null,
      _tokenId?: null,
      _amount?: null
    ): ReceiveFromChainEventFilter;

    "SendBatchToChain(uint16,address,bytes,uint256[],uint256[])"(
      _dstChainId?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _toAddress?: PromiseOrValue<BytesLike> | null,
      _tokenIds?: null,
      _amounts?: null
    ): SendBatchToChainEventFilter;
    SendBatchToChain(
      _dstChainId?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _toAddress?: PromiseOrValue<BytesLike> | null,
      _tokenIds?: null,
      _amounts?: null
    ): SendBatchToChainEventFilter;

    "SendToChain(uint16,address,bytes,uint256,uint256)"(
      _dstChainId?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _toAddress?: PromiseOrValue<BytesLike> | null,
      _tokenId?: null,
      _amount?: null
    ): SendToChainEventFilter;
    SendToChain(
      _dstChainId?: PromiseOrValue<BigNumberish> | null,
      _from?: PromiseOrValue<string> | null,
      _toAddress?: PromiseOrValue<BytesLike> | null,
      _tokenId?: null,
      _amount?: null
    ): SendToChainEventFilter;
  };

  estimateGas: {
    estimateSendBatchFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateSendFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendBatchFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    estimateSendBatchFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateSendFee(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _useZro: PromiseOrValue<boolean>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendBatchFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendFrom(
      _from: PromiseOrValue<string>,
      _dstChainId: PromiseOrValue<BigNumberish>,
      _toAddress: PromiseOrValue<BytesLike>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _refundAddress: PromiseOrValue<string>,
      _zroPaymentAddress: PromiseOrValue<string>,
      _adapterParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
