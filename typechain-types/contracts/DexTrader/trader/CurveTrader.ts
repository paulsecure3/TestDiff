/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type CurveRequestExactInOutParamsStruct = {
  pool: PromiseOrValue<string>;
  coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  amount: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
};

export type CurveRequestExactInOutParamsStructOutput = [
  string,
  [number, number],
  BigNumber,
  number
] & {
  pool: string;
  coins: [number, number];
  amount: BigNumber;
  slippage: number;
};

export type CurveSwapRequestStruct = {
  pool: PromiseOrValue<string>;
  coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  expectedAmountIn: PromiseOrValue<BigNumberish>;
  expectedAmountOut: PromiseOrValue<BigNumberish>;
  slippage: PromiseOrValue<BigNumberish>;
};

export type CurveSwapRequestStructOutput = [
  string,
  [number, number],
  BigNumber,
  BigNumber,
  number
] & {
  pool: string;
  coins: [number, number];
  expectedAmountIn: BigNumber;
  expectedAmountOut: BigNumber;
  slippage: number;
};

export type PoolConfigStruct = {
  tokens: PromiseOrValue<string>[];
  get_dy_signature: PromiseOrValue<string>;
  exchange_signature: PromiseOrValue<string>;
};

export type PoolConfigStructOutput = [string[], string, string] & {
  tokens: string[];
  get_dy_signature: string;
  exchange_signature: string;
};

export interface CurveTraderInterface extends utils.Interface {
  functions: {
    "BPS_DEMOMINATOR()": FunctionFragment;
    "CORRECTION_DENOMINATOR()": FunctionFragment;
    "EXACT_AMOUNT_IN_CORRECTION()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "TARGET_DECIMALS()": FunctionFragment;
    "decodeDecodeRequestExactInOutParams(bytes)": FunctionFragment;
    "decodeSwapRequest(bytes)": FunctionFragment;
    "exchange(address,bytes)": FunctionFragment;
    "generateExpectInOutRequest(address,uint8[2],uint256,uint16)": FunctionFragment;
    "generateSwapRequest(address,uint8[2],uint256,uint256,uint16)": FunctionFragment;
    "getAmountIn(bytes)": FunctionFragment;
    "getAmountOut(bytes)": FunctionFragment;
    "getPermissionLevel(address)": FunctionFragment;
    "getPoolConfigOf(address)": FunctionFragment;
    "hasPermissionLevel(address,bytes1)": FunctionFragment;
    "isPoolRegistered(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerPool(address,uint8,string,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPermission(address,bytes1)": FunctionFragment;
    "setUp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterPool(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BPS_DEMOMINATOR"
      | "CORRECTION_DENOMINATOR"
      | "EXACT_AMOUNT_IN_CORRECTION"
      | "PRECISION"
      | "TARGET_DECIMALS"
      | "decodeDecodeRequestExactInOutParams"
      | "decodeSwapRequest"
      | "exchange"
      | "generateExpectInOutRequest"
      | "generateSwapRequest"
      | "getAmountIn"
      | "getAmountOut"
      | "getPermissionLevel"
      | "getPoolConfigOf"
      | "hasPermissionLevel"
      | "isPoolRegistered"
      | "owner"
      | "registerPool"
      | "renounceOwnership"
      | "setPermission"
      | "setUp"
      | "transferOwnership"
      | "unregisterPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BPS_DEMOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CORRECTION_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXACT_AMOUNT_IN_CORRECTION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TARGET_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeDecodeRequestExactInOutParams",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwapRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateExpectInOutRequest",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSwapRequest",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionLevel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolConfigOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermissionLevel",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPool",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DEMOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CORRECTION_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXACT_AMOUNT_IN_CORRECTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeDecodeRequestExactInOutParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSwapRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateExpectInOutRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSwapRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolConfigOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermissionLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPool",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PermissionChanged(address,bytes1)": EventFragment;
    "PoolRegistered(address)": EventFragment;
    "PoolUnRegistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUnRegistered"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PermissionChangedEventObject {
  _address: string;
  newPermission: string;
}
export type PermissionChangedEvent = TypedEvent<
  [string, string],
  PermissionChangedEventObject
>;

export type PermissionChangedEventFilter =
  TypedEventFilter<PermissionChangedEvent>;

export interface PoolRegisteredEventObject {
  pool: string;
}
export type PoolRegisteredEvent = TypedEvent<
  [string],
  PoolRegisteredEventObject
>;

export type PoolRegisteredEventFilter = TypedEventFilter<PoolRegisteredEvent>;

export interface PoolUnRegisteredEventObject {
  pool: string;
}
export type PoolUnRegisteredEvent = TypedEvent<
  [string],
  PoolUnRegisteredEventObject
>;

export type PoolUnRegisteredEventFilter =
  TypedEventFilter<PoolUnRegisteredEvent>;

export interface CurveTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPS_DEMOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<[number]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    decodeDecodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CurveRequestExactInOutParamsStructOutput]>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CurveSwapRequestStructOutput]>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateExpectInOutRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSwapRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn_: BigNumber }>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolConfigOf(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[PoolConfigStructOutput]>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolRegistered(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerPool(
      _pool: PromiseOrValue<string>,
      _totalCoins: PromiseOrValue<BigNumberish>,
      _get_dy_signature: PromiseOrValue<string>,
      _exchange_signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BPS_DEMOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<number>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET_DECIMALS(overrides?: CallOverrides): Promise<number>;

  decodeDecodeRequestExactInOutParams(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CurveRequestExactInOutParamsStructOutput>;

  decodeSwapRequest(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CurveSwapRequestStructOutput>;

  exchange(
    _receiver: PromiseOrValue<string>,
    _request: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateExpectInOutRequest(
    _pool: PromiseOrValue<string>,
    _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _amount: PromiseOrValue<BigNumberish>,
    _slippage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSwapRequest(
    _pool: PromiseOrValue<string>,
    _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _expectedAmountIn: PromiseOrValue<BigNumberish>,
    _expectedAmountOut: PromiseOrValue<BigNumberish>,
    _slippage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAmountIn(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPermissionLevel(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolConfigOf(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PoolConfigStructOutput>;

  hasPermissionLevel(
    _address: PromiseOrValue<string>,
    accessLevel: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolRegistered(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerPool(
    _pool: PromiseOrValue<string>,
    _totalCoins: PromiseOrValue<BigNumberish>,
    _get_dy_signature: PromiseOrValue<string>,
    _exchange_signature: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPermission(
    _address: PromiseOrValue<string>,
    _permission: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterPool(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_DEMOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<number>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_DECIMALS(overrides?: CallOverrides): Promise<number>;

    decodeDecodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CurveRequestExactInOutParamsStructOutput>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CurveSwapRequestStructOutput>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateExpectInOutRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSwapRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolConfigOf(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PoolConfigStructOutput>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolRegistered(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerPool(
      _pool: PromiseOrValue<string>,
      _totalCoins: PromiseOrValue<BigNumberish>,
      _get_dy_signature: PromiseOrValue<string>,
      _exchange_signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PermissionChanged(address,bytes1)"(
      _address?: PromiseOrValue<string> | null,
      newPermission?: null
    ): PermissionChangedEventFilter;
    PermissionChanged(
      _address?: PromiseOrValue<string> | null,
      newPermission?: null
    ): PermissionChangedEventFilter;

    "PoolRegistered(address)"(
      pool?: PromiseOrValue<string> | null
    ): PoolRegisteredEventFilter;
    PoolRegistered(
      pool?: PromiseOrValue<string> | null
    ): PoolRegisteredEventFilter;

    "PoolUnRegistered(address)"(
      pool?: PromiseOrValue<string> | null
    ): PoolUnRegisteredEventFilter;
    PoolUnRegistered(
      pool?: PromiseOrValue<string> | null
    ): PoolUnRegisteredEventFilter;
  };

  estimateGas: {
    BPS_DEMOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    decodeDecodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateExpectInOutRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSwapRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolConfigOf(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolRegistered(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      _pool: PromiseOrValue<string>,
      _totalCoins: PromiseOrValue<BigNumberish>,
      _get_dy_signature: PromiseOrValue<string>,
      _exchange_signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DEMOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CORRECTION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXACT_AMOUNT_IN_CORRECTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeDecodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateExpectInOutRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _amount: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSwapRequest(
      _pool: PromiseOrValue<string>,
      _coins: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolConfigOf(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolRegistered(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      _pool: PromiseOrValue<string>,
      _totalCoins: PromiseOrValue<BigNumberish>,
      _get_dy_signature: PromiseOrValue<string>,
      _exchange_signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterPool(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
