/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type GenericRequestExactInOutParamsStruct = {
  path: PromiseOrValue<string>[];
  amount: PromiseOrValue<BigNumberish>;
};

export type GenericRequestExactInOutParamsStructOutput = [
  string[],
  BigNumber
] & { path: string[]; amount: BigNumber };

export type GenericSwapRequestStruct = {
  path: PromiseOrValue<string>[];
  expectedAmountIn: PromiseOrValue<BigNumberish>;
  expectedAmountOut: PromiseOrValue<BigNumberish>;
};

export type GenericSwapRequestStructOutput = [
  string[],
  BigNumber,
  BigNumber
] & {
  path: string[];
  expectedAmountIn: BigNumber;
  expectedAmountOut: BigNumber;
};

export interface UniswapV2TraderInterface extends utils.Interface {
  functions: {
    "CORRECTION_DENOMINATOR()": FunctionFragment;
    "EXACT_AMOUNT_IN_CORRECTION()": FunctionFragment;
    "decodeRequestExactInOutParams(bytes)": FunctionFragment;
    "decodeSwapRequest(bytes)": FunctionFragment;
    "exchange(address,bytes)": FunctionFragment;
    "generateExpectInOutRequest(address[],uint256)": FunctionFragment;
    "generateSwapRequest(address[],uint256,uint256)": FunctionFragment;
    "getAmountIn(bytes)": FunctionFragment;
    "getAmountOut(bytes)": FunctionFragment;
    "getPermissionLevel(address)": FunctionFragment;
    "hasPermissionLevel(address,bytes1)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setPermission(address,bytes1)": FunctionFragment;
    "setUp(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CORRECTION_DENOMINATOR"
      | "EXACT_AMOUNT_IN_CORRECTION"
      | "decodeRequestExactInOutParams"
      | "decodeSwapRequest"
      | "exchange"
      | "generateExpectInOutRequest"
      | "generateSwapRequest"
      | "getAmountIn"
      | "getAmountOut"
      | "getPermissionLevel"
      | "hasPermissionLevel"
      | "owner"
      | "renounceOwnership"
      | "router"
      | "setPermission"
      | "setUp"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CORRECTION_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXACT_AMOUNT_IN_CORRECTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeRequestExactInOutParams",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwapRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateExpectInOutRequest",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSwapRequest",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionLevel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermissionLevel",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPermission",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CORRECTION_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXACT_AMOUNT_IN_CORRECTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeRequestExactInOutParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSwapRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateExpectInOutRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSwapRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermissionLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PermissionChanged(address,bytes1)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionChanged"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PermissionChangedEventObject {
  _address: string;
  newPermission: string;
}
export type PermissionChangedEvent = TypedEvent<
  [string, string],
  PermissionChangedEventObject
>;

export type PermissionChangedEventFilter =
  TypedEventFilter<PermissionChangedEvent>;

export interface UniswapV2Trader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV2TraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<[number]>;

    decodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GenericRequestExactInOutParamsStructOutput]>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GenericSwapRequestStructOutput]>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateExpectInOutRequest(
      _path: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSwapRequest(
      _path: PromiseOrValue<string>[],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<number>;

  decodeRequestExactInOutParams(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GenericRequestExactInOutParamsStructOutput>;

  decodeSwapRequest(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GenericSwapRequestStructOutput>;

  exchange(
    _receiver: PromiseOrValue<string>,
    _request: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateExpectInOutRequest(
    _path: PromiseOrValue<string>[],
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSwapRequest(
    _path: PromiseOrValue<string>[],
    _expectedAmountIn: PromiseOrValue<BigNumberish>,
    _expectedAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAmountIn(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    _request: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPermissionLevel(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasPermissionLevel(
    _address: PromiseOrValue<string>,
    accessLevel: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setPermission(
    _address: PromiseOrValue<string>,
    _permission: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<number>;

    decodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GenericRequestExactInOutParamsStructOutput>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GenericSwapRequestStructOutput>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateExpectInOutRequest(
      _path: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSwapRequest(
      _path: PromiseOrValue<string>[],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PermissionChanged(address,bytes1)"(
      _address?: PromiseOrValue<string> | null,
      newPermission?: null
    ): PermissionChangedEventFilter;
    PermissionChanged(
      _address?: PromiseOrValue<string> | null,
      newPermission?: null
    ): PermissionChangedEventFilter;
  };

  estimateGas: {
    CORRECTION_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    EXACT_AMOUNT_IN_CORRECTION(overrides?: CallOverrides): Promise<BigNumber>;

    decodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateExpectInOutRequest(
      _path: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSwapRequest(
      _path: PromiseOrValue<string>[],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CORRECTION_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXACT_AMOUNT_IN_CORRECTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeRequestExactInOutParams(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSwapRequest(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      _receiver: PromiseOrValue<string>,
      _request: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateExpectInOutRequest(
      _path: PromiseOrValue<string>[],
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSwapRequest(
      _path: PromiseOrValue<string>[],
      _expectedAmountIn: PromiseOrValue<BigNumberish>,
      _expectedAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _request: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionLevel(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermissionLevel(
      _address: PromiseOrValue<string>,
      accessLevel: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPermission(
      _address: PromiseOrValue<string>,
      _permission: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
