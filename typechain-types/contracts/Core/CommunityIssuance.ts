/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CommunityIssuanceInterface extends utils.Interface {
  functions: {
    "AGLSupplyCaps(address)": FunctionFragment;
    "DECIMAL_PRECISION()": FunctionFragment;
    "DISTRIBUTION_DURATION()": FunctionFragment;
    "NAME()": FunctionFragment;
    "SECONDS_IN_ONE_MINUTE()": FunctionFragment;
    "addFundToStabilityPool(address,uint256)": FunctionFragment;
    "addFundToStabilityPoolFrom(address,uint256,address)": FunctionFragment;
    "adminContract()": FunctionFragment;
    "aglDistributionsByPool(address)": FunctionFragment;
    "aglToken()": FunctionFragment;
    "configStabilityPool(address,address,uint256)": FunctionFragment;
    "configStabilityPoolAndSend(address,address,uint256,uint256)": FunctionFragment;
    "convertPoolFundV1toV2(address[])": FunctionFragment;
    "getRewardsLeftInStabilityPool(address)": FunctionFragment;
    "getTotalAssetIssued(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isWalletAdminOfPool(address,address)": FunctionFragment;
    "issueAGL()": FunctionFragment;
    "lastUpdateTime(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFullAccess(address)": FunctionFragment;
    "removeFundFromStabilityPool(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendAGL(address,uint256)": FunctionFragment;
    "setAddresses(address,address,address)": FunctionFragment;
    "setAdminContract(address)": FunctionFragment;
    "setProtocolAccessOf(address,bool)": FunctionFragment;
    "setStabilityPoolAdmin(address,address,bool)": FunctionFragment;
    "setWeeklyAglDistribution(address,uint256)": FunctionFragment;
    "stabilityPoolAdmin(address,address)": FunctionFragment;
    "stabilityPoolManager()": FunctionFragment;
    "stabilityPoolRewards(address)": FunctionFragment;
    "totalAGLIssued(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wrapRewardsToken(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AGLSupplyCaps"
      | "DECIMAL_PRECISION"
      | "DISTRIBUTION_DURATION"
      | "NAME"
      | "SECONDS_IN_ONE_MINUTE"
      | "addFundToStabilityPool"
      | "addFundToStabilityPoolFrom"
      | "adminContract"
      | "aglDistributionsByPool"
      | "aglToken"
      | "configStabilityPool"
      | "configStabilityPoolAndSend"
      | "convertPoolFundV1toV2"
      | "getRewardsLeftInStabilityPool"
      | "getTotalAssetIssued"
      | "isInitialized"
      | "isWalletAdminOfPool"
      | "issueAGL"
      | "lastUpdateTime"
      | "owner"
      | "protocolFullAccess"
      | "removeFundFromStabilityPool"
      | "renounceOwnership"
      | "sendAGL"
      | "setAddresses"
      | "setAdminContract"
      | "setProtocolAccessOf"
      | "setStabilityPoolAdmin"
      | "setWeeklyAglDistribution"
      | "stabilityPoolAdmin"
      | "stabilityPoolManager"
      | "stabilityPoolRewards"
      | "totalAGLIssued"
      | "transferOwnership"
      | "wrapRewardsToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AGLSupplyCaps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SECONDS_IN_ONE_MINUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFundToStabilityPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFundToStabilityPoolFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "adminContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aglDistributionsByPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "aglToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "configStabilityPool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configStabilityPoolAndSend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertPoolFundV1toV2",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsLeftInStabilityPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAssetIssued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletAdminOfPool",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "issueAGL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFullAccess",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFundFromStabilityPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAGL",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolAccessOf",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStabilityPoolAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeeklyAglDistribution",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAGLIssued",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapRewardsToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AGLSupplyCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_IN_ONE_MINUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFundToStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFundToStabilityPoolFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aglDistributionsByPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aglToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configStabilityPoolAndSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPoolFundV1toV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsLeftInStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAssetIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletAdminOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issueAGL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFullAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFundFromStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendAGL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolAccessOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStabilityPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeeklyAglDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAGLIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapRewardsToken",
    data: BytesLike
  ): Result;

  events: {
    "AGLTokenAddressSet(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StabilityPoolAddressSet(address)": EventFragment;
    "TotalAGLIssuedUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLTokenAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityPoolAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalAGLIssuedUpdated"): EventFragment;
}

export interface AGLTokenAddressSetEventObject {
  _AGLTokenAddress: string;
}
export type AGLTokenAddressSetEvent = TypedEvent<
  [string],
  AGLTokenAddressSetEventObject
>;

export type AGLTokenAddressSetEventFilter =
  TypedEventFilter<AGLTokenAddressSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StabilityPoolAddressSetEventObject {
  _stabilityPoolAddress: string;
}
export type StabilityPoolAddressSetEvent = TypedEvent<
  [string],
  StabilityPoolAddressSetEventObject
>;

export type StabilityPoolAddressSetEventFilter =
  TypedEventFilter<StabilityPoolAddressSetEvent>;

export interface TotalAGLIssuedUpdatedEventObject {
  stabilityPool: string;
  _totalAGLIssued: BigNumber;
}
export type TotalAGLIssuedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  TotalAGLIssuedUpdatedEventObject
>;

export type TotalAGLIssuedUpdatedEventFilter =
  TypedEventFilter<TotalAGLIssuedUpdatedEvent>;

export interface CommunityIssuance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommunityIssuanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AGLSupplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    DISTRIBUTION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    adminContract(overrides?: CallOverrides): Promise<[string]>;

    aglDistributionsByPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    aglToken(overrides?: CallOverrides): Promise<[string]>;

    configStabilityPool(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configStabilityPoolAndSend(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertPoolFundV1toV2(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardsLeftInStabilityPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAssetIssued(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isWalletAdminOfPool(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issueAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastUpdateTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFullAccess(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFundFromStabilityPool(
      _pool: PromiseOrValue<string>,
      _fundToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _aglTokenAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolAccessOf(
      _address: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStabilityPoolAdmin(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stabilityPoolAdmin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stabilityPoolManager(overrides?: CallOverrides): Promise<[string]>;

    stabilityPoolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardToken: string;
        totalRewardIssued: BigNumber;
        lastUpdateTime: BigNumber;
        totalRewardSupply: BigNumber;
        rewardDistributionPerMin: BigNumber;
      }
    >;

    totalAGLIssued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrapRewardsToken(
      _pool: PromiseOrValue<string>,
      _vestaWrappedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AGLSupplyCaps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  DISTRIBUTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

  addFundToStabilityPool(
    _pool: PromiseOrValue<string>,
    _assignedSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFundToStabilityPoolFrom(
    _pool: PromiseOrValue<string>,
    _assignedSupply: PromiseOrValue<BigNumberish>,
    _spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  adminContract(overrides?: CallOverrides): Promise<string>;

  aglDistributionsByPool(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  aglToken(overrides?: CallOverrides): Promise<string>;

  configStabilityPool(
    _pool: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _weeklyReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configStabilityPoolAndSend(
    _pool: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _weeklyReward: PromiseOrValue<BigNumberish>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertPoolFundV1toV2(
    _pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardsLeftInStabilityPool(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAssetIssued(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isWalletAdminOfPool(
    _pool: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issueAGL(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastUpdateTime(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFullAccess(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFundFromStabilityPool(
    _pool: PromiseOrValue<string>,
    _fundToRemove: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendAGL(
    _account: PromiseOrValue<string>,
    _aglAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _aglTokenAddress: PromiseOrValue<string>,
    _stabilityPoolManagerAddress: PromiseOrValue<string>,
    _adminContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminContract(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolAccessOf(
    _address: PromiseOrValue<string>,
    _access: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStabilityPoolAdmin(
    _pool: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _access: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWeeklyAglDistribution(
    _stabilityPool: PromiseOrValue<string>,
    _weeklyReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stabilityPoolAdmin(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stabilityPoolManager(overrides?: CallOverrides): Promise<string>;

  stabilityPoolRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rewardToken: string;
      totalRewardIssued: BigNumber;
      lastUpdateTime: BigNumber;
      totalRewardSupply: BigNumber;
      rewardDistributionPerMin: BigNumber;
    }
  >;

  totalAGLIssued(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrapRewardsToken(
    _pool: PromiseOrValue<string>,
    _vestaWrappedToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AGLSupplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    DISTRIBUTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    adminContract(overrides?: CallOverrides): Promise<string>;

    aglDistributionsByPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aglToken(overrides?: CallOverrides): Promise<string>;

    configStabilityPool(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    configStabilityPoolAndSend(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    convertPoolFundV1toV2(
      _pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardsLeftInStabilityPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAssetIssued(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isWalletAdminOfPool(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueAGL(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFullAccess(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFundFromStabilityPool(
      _pool: PromiseOrValue<string>,
      _fundToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _aglTokenAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolAccessOf(
      _address: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStabilityPoolAdmin(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityPoolAdmin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stabilityPoolManager(overrides?: CallOverrides): Promise<string>;

    stabilityPoolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rewardToken: string;
        totalRewardIssued: BigNumber;
        lastUpdateTime: BigNumber;
        totalRewardSupply: BigNumber;
        rewardDistributionPerMin: BigNumber;
      }
    >;

    totalAGLIssued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapRewardsToken(
      _pool: PromiseOrValue<string>,
      _vestaWrappedToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AGLTokenAddressSet(address)"(
      _AGLTokenAddress?: null
    ): AGLTokenAddressSetEventFilter;
    AGLTokenAddressSet(_AGLTokenAddress?: null): AGLTokenAddressSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StabilityPoolAddressSet(address)"(
      _stabilityPoolAddress?: null
    ): StabilityPoolAddressSetEventFilter;
    StabilityPoolAddressSet(
      _stabilityPoolAddress?: null
    ): StabilityPoolAddressSetEventFilter;

    "TotalAGLIssuedUpdated(address,uint256)"(
      stabilityPool?: PromiseOrValue<string> | null,
      _totalAGLIssued?: null
    ): TotalAGLIssuedUpdatedEventFilter;
    TotalAGLIssuedUpdated(
      stabilityPool?: PromiseOrValue<string> | null,
      _totalAGLIssued?: null
    ): TotalAGLIssuedUpdatedEventFilter;
  };

  estimateGas: {
    AGLSupplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    DISTRIBUTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_ONE_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<BigNumber>;

    aglDistributionsByPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aglToken(overrides?: CallOverrides): Promise<BigNumber>;

    configStabilityPool(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configStabilityPoolAndSend(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertPoolFundV1toV2(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardsLeftInStabilityPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAssetIssued(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isWalletAdminOfPool(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastUpdateTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFullAccess(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFundFromStabilityPool(
      _pool: PromiseOrValue<string>,
      _fundToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _aglTokenAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolAccessOf(
      _address: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStabilityPoolAdmin(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stabilityPoolAdmin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stabilityPoolManager(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPoolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAGLIssued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrapRewardsToken(
      _pool: PromiseOrValue<string>,
      _vestaWrappedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AGLSupplyCaps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DISTRIBUTION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_IN_ONE_MINUTE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    adminContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aglDistributionsByPool(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aglToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    configStabilityPool(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configStabilityPoolAndSend(
      _pool: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertPoolFundV1toV2(
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardsLeftInStabilityPool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAssetIssued(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWalletAdminOfPool(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFullAccess(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFundFromStabilityPool(
      _pool: PromiseOrValue<string>,
      _fundToRemove: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _aglTokenAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolAccessOf(
      _address: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStabilityPoolAdmin(
      _pool: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _access: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stabilityPoolAdmin(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stabilityPoolManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stabilityPoolRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAGLIssued(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrapRewardsToken(
      _pool: PromiseOrValue<string>,
      _vestaWrappedToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
