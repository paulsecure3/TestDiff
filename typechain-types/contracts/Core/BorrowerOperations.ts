/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAgilelyDexTrader {
  export type ManualExchangeStruct = {
    traderSelector: PromiseOrValue<BytesLike>;
    tokenInOut: [PromiseOrValue<string>, PromiseOrValue<string>];
    data: PromiseOrValue<BytesLike>;
  };

  export type ManualExchangeStructOutput = [
    string,
    [string, string],
    string
  ] & { traderSelector: string; tokenInOut: [string, string]; data: string };
}

export interface BorrowerOperationsInterface extends utils.Interface {
  functions: {
    "AGLStaking()": FunctionFragment;
    "AGLStakingAddress()": FunctionFragment;
    "DECIMAL_PRECISION()": FunctionFragment;
    "ETH_REF_ADDRESS()": FunctionFragment;
    "NAME()": FunctionFragment;
    "WETH()": FunctionFragment;
    "adjustTrove(address,uint256,uint256,uint256,uint256,bool,address,address)": FunctionFragment;
    "aglParams()": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "claimCollateral(address)": FunctionFragment;
    "claimCollaterals(address[])": FunctionFragment;
    "closeTrove(address)": FunctionFragment;
    "closeTroveWithDexTrader(address,uint256,(bytes16,address[2],bytes)[])": FunctionFragment;
    "dexTrader()": FunctionFragment;
    "getCompositeDebt(address,uint256)": FunctionFragment;
    "getEntireSystemColl(address)": FunctionFragment;
    "getEntireSystemDebt(address)": FunctionFragment;
    "interestManager()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "moveETHGainToTrove(address,uint256,address,address,address)": FunctionFragment;
    "openTrove(address,uint256,uint256,uint256,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAGLParameters(address)": FunctionFragment;
    "setAGLccess(address,bool)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address,address,address)": FunctionFragment;
    "setDexTrader(address)": FunctionFragment;
    "setInterestManager(address)": FunctionFragment;
    "sortedTroves()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "troveManager()": FunctionFragment;
    "usdaToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AGLStaking"
      | "AGLStakingAddress"
      | "DECIMAL_PRECISION"
      | "ETH_REF_ADDRESS"
      | "NAME"
      | "WETH"
      | "adjustTrove"
      | "aglParams"
      | "burn"
      | "claimCollateral"
      | "claimCollaterals"
      | "closeTrove"
      | "closeTroveWithDexTrader"
      | "dexTrader"
      | "getCompositeDebt"
      | "getEntireSystemColl"
      | "getEntireSystemDebt"
      | "interestManager"
      | "isInitialized"
      | "mint"
      | "moveETHGainToTrove"
      | "openTrove"
      | "owner"
      | "renounceOwnership"
      | "setAGLParameters"
      | "setAGLccess"
      | "setAddresses"
      | "setDexTrader"
      | "setInterestManager"
      | "sortedTroves"
      | "transferOwnership"
      | "troveManager"
      | "usdaToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AGLStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AGLStakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_REF_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adjustTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "aglParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollaterals",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTroveWithDexTrader",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IAgilelyDexTrader.ManualExchangeStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "dexTrader", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCompositeDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemColl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireSystemDebt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveETHGainToTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAGLParameters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAGLccess",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexTrader",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdaToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AGLStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AGLStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_REF_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aglParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeTroveWithDexTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexTrader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompositeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireSystemDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveETHGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTrove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAGLParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAGLccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDexTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdaToken", data: BytesLike): Result;

  events: {
    "AGLStakingAddressChanged(address)": EventFragment;
    "CollSurplusPoolAddressChanged(address)": EventFragment;
    "GasPoolAddressChanged(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolManagerAddressChanged(address)": EventFragment;
    "TroveCreated(address,address,uint256)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "TroveUpdated(address,address,uint256,uint256,uint256,uint8)": EventFragment;
    "USDABorrowingFeePaid(address,address,uint256)": EventFragment;
    "USDATokenAddressChanged(address)": EventFragment;
    "VaultParametersBaseChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLStakingAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollSurplusPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolManagerAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDABorrowingFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDATokenAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultParametersBaseChanged"): EventFragment;
}

export interface AGLStakingAddressChangedEventObject {
  _aglStakingAddress: string;
}
export type AGLStakingAddressChangedEvent = TypedEvent<
  [string],
  AGLStakingAddressChangedEventObject
>;

export type AGLStakingAddressChangedEventFilter =
  TypedEventFilter<AGLStakingAddressChangedEvent>;

export interface CollSurplusPoolAddressChangedEventObject {
  _collSurplusPoolAddress: string;
}
export type CollSurplusPoolAddressChangedEvent = TypedEvent<
  [string],
  CollSurplusPoolAddressChangedEventObject
>;

export type CollSurplusPoolAddressChangedEventFilter =
  TypedEventFilter<CollSurplusPoolAddressChangedEvent>;

export interface GasPoolAddressChangedEventObject {
  _gasPoolAddress: string;
}
export type GasPoolAddressChangedEvent = TypedEvent<
  [string],
  GasPoolAddressChangedEventObject
>;

export type GasPoolAddressChangedEventFilter =
  TypedEventFilter<GasPoolAddressChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _sortedTrovesAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface StabilityPoolManagerAddressChangedEventObject {
  _stabilityPoolAddress: string;
}
export type StabilityPoolManagerAddressChangedEvent = TypedEvent<
  [string],
  StabilityPoolManagerAddressChangedEventObject
>;

export type StabilityPoolManagerAddressChangedEventFilter =
  TypedEventFilter<StabilityPoolManagerAddressChangedEvent>;

export interface TroveCreatedEventObject {
  _asset: string;
  _borrower: string;
  arrayIndex: BigNumber;
}
export type TroveCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  TroveCreatedEventObject
>;

export type TroveCreatedEventFilter = TypedEventFilter<TroveCreatedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _newTroveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface TroveUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  stake: BigNumber;
  operation: number;
}
export type TroveUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, number],
  TroveUpdatedEventObject
>;

export type TroveUpdatedEventFilter = TypedEventFilter<TroveUpdatedEvent>;

export interface USDABorrowingFeePaidEventObject {
  _asset: string;
  _borrower: string;
  _USDAFee: BigNumber;
}
export type USDABorrowingFeePaidEvent = TypedEvent<
  [string, string, BigNumber],
  USDABorrowingFeePaidEventObject
>;

export type USDABorrowingFeePaidEventFilter =
  TypedEventFilter<USDABorrowingFeePaidEvent>;

export interface USDATokenAddressChangedEventObject {
  _usdaTokenAddress: string;
}
export type USDATokenAddressChangedEvent = TypedEvent<
  [string],
  USDATokenAddressChangedEventObject
>;

export type USDATokenAddressChangedEventFilter =
  TypedEventFilter<USDATokenAddressChangedEvent>;

export interface VaultParametersBaseChangedEventObject {
  newAddress: string;
}
export type VaultParametersBaseChangedEvent = TypedEvent<
  [string],
  VaultParametersBaseChangedEventObject
>;

export type VaultParametersBaseChangedEventFilter =
  TypedEventFilter<VaultParametersBaseChangedEvent>;

export interface BorrowerOperations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowerOperationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AGLStaking(overrides?: CallOverrides): Promise<[string]>;

    AGLStakingAddress(overrides?: CallOverrides): Promise<[string]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _USDAChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aglParams(overrides?: CallOverrides): Promise<[string]>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTroveWithDexTrader(
      _asset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _manualExchange: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexTrader(overrides?: CallOverrides): Promise<[string]>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemColl: BigNumber }>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { entireSystemDebt: BigNumber }>;

    interestManager(overrides?: CallOverrides): Promise<[string]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _borrower: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAGLccess(
      _of: PromiseOrValue<string>,
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _gasPoolAddress: PromiseOrValue<string>,
      _collSurplusPoolAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _aglStakingAddress: PromiseOrValue<string>,
      _aglParameters: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDexTrader(
      _dexTrader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterestManager(
      _interestManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;

    usdaToken(overrides?: CallOverrides): Promise<[string]>;
  };

  AGLStaking(overrides?: CallOverrides): Promise<string>;

  AGLStakingAddress(overrides?: CallOverrides): Promise<string>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<string>;

  NAME(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  adjustTrove(
    _asset: PromiseOrValue<string>,
    _assetSent: PromiseOrValue<BigNumberish>,
    _maxFeePercentage: PromiseOrValue<BigNumberish>,
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _USDAChange: PromiseOrValue<BigNumberish>,
    _isDebtIncrease: PromiseOrValue<boolean>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aglParams(overrides?: CallOverrides): Promise<string>;

  burn(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollaterals(
    _assets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTrove(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTroveWithDexTrader(
    _asset: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _manualExchange: IAgilelyDexTrader.ManualExchangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexTrader(overrides?: CallOverrides): Promise<string>;

  getCompositeDebt(
    _asset: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireSystemColl(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireSystemDebt(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  interestManager(overrides?: CallOverrides): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  mint(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveETHGainToTrove(
    _asset: PromiseOrValue<string>,
    _amountMoved: PromiseOrValue<BigNumberish>,
    _borrower: PromiseOrValue<string>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openTrove(
    _asset: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _maxFeePercentage: PromiseOrValue<BigNumberish>,
    _AGLmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAGLParameters(
    _vaultParams: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAGLccess(
    _of: PromiseOrValue<string>,
    _enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _troveManagerAddress: PromiseOrValue<string>,
    _stabilityPoolManagerAddress: PromiseOrValue<string>,
    _gasPoolAddress: PromiseOrValue<string>,
    _collSurplusPoolAddress: PromiseOrValue<string>,
    _sortedTrovesAddress: PromiseOrValue<string>,
    _usdaTokenAddress: PromiseOrValue<string>,
    _aglStakingAddress: PromiseOrValue<string>,
    _aglParameters: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDexTrader(
    _dexTrader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterestManager(
    _interestManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  usdaToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    AGLStaking(overrides?: CallOverrides): Promise<string>;

    AGLStakingAddress(overrides?: CallOverrides): Promise<string>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<string>;

    NAME(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _USDAChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    aglParams(overrides?: CallOverrides): Promise<string>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTroveWithDexTrader(
      _asset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _manualExchange: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    dexTrader(overrides?: CallOverrides): Promise<string>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestManager(overrides?: CallOverrides): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _borrower: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAGLccess(
      _of: PromiseOrValue<string>,
      _enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _gasPoolAddress: PromiseOrValue<string>,
      _collSurplusPoolAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _aglStakingAddress: PromiseOrValue<string>,
      _aglParameters: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDexTrader(
      _dexTrader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestManager(
      _interestManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    troveManager(overrides?: CallOverrides): Promise<string>;

    usdaToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AGLStakingAddressChanged(address)"(
      _aglStakingAddress?: null
    ): AGLStakingAddressChangedEventFilter;
    AGLStakingAddressChanged(
      _aglStakingAddress?: null
    ): AGLStakingAddressChangedEventFilter;

    "CollSurplusPoolAddressChanged(address)"(
      _collSurplusPoolAddress?: null
    ): CollSurplusPoolAddressChangedEventFilter;
    CollSurplusPoolAddressChanged(
      _collSurplusPoolAddress?: null
    ): CollSurplusPoolAddressChangedEventFilter;

    "GasPoolAddressChanged(address)"(
      _gasPoolAddress?: null
    ): GasPoolAddressChangedEventFilter;
    GasPoolAddressChanged(
      _gasPoolAddress?: null
    ): GasPoolAddressChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;

    "StabilityPoolManagerAddressChanged(address)"(
      _stabilityPoolAddress?: null
    ): StabilityPoolManagerAddressChangedEventFilter;
    StabilityPoolManagerAddressChanged(
      _stabilityPoolAddress?: null
    ): StabilityPoolManagerAddressChangedEventFilter;

    "TroveCreated(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null
    ): TroveCreatedEventFilter;
    TroveCreated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null
    ): TroveCreatedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;

    "TroveUpdated(address,address,uint256,uint256,uint256,uint8)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TroveUpdatedEventFilter;
    TroveUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TroveUpdatedEventFilter;

    "USDABorrowingFeePaid(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _USDAFee?: null
    ): USDABorrowingFeePaidEventFilter;
    USDABorrowingFeePaid(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _USDAFee?: null
    ): USDABorrowingFeePaidEventFilter;

    "USDATokenAddressChanged(address)"(
      _usdaTokenAddress?: null
    ): USDATokenAddressChangedEventFilter;
    USDATokenAddressChanged(
      _usdaTokenAddress?: null
    ): USDATokenAddressChangedEventFilter;

    "VaultParametersBaseChanged(address)"(
      newAddress?: PromiseOrValue<string> | null
    ): VaultParametersBaseChangedEventFilter;
    VaultParametersBaseChanged(
      newAddress?: PromiseOrValue<string> | null
    ): VaultParametersBaseChangedEventFilter;
  };

  estimateGas: {
    AGLStaking(overrides?: CallOverrides): Promise<BigNumber>;

    AGLStakingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _USDAChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aglParams(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTroveWithDexTrader(
      _asset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _manualExchange: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexTrader(overrides?: CallOverrides): Promise<BigNumber>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestManager(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _borrower: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAGLccess(
      _of: PromiseOrValue<string>,
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _gasPoolAddress: PromiseOrValue<string>,
      _collSurplusPoolAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _aglStakingAddress: PromiseOrValue<string>,
      _aglParameters: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDexTrader(
      _dexTrader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterestManager(
      _interestManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;

    usdaToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AGLStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AGLStakingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH_REF_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _USDAChange: PromiseOrValue<BigNumberish>,
      _isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aglParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTroveWithDexTrader(
      _asset: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _manualExchange: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexTrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemColl(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireSystemDebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _borrower: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFeePercentage: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAGLParameters(
      _vaultParams: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAGLccess(
      _of: PromiseOrValue<string>,
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _stabilityPoolManagerAddress: PromiseOrValue<string>,
      _gasPoolAddress: PromiseOrValue<string>,
      _collSurplusPoolAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _aglStakingAddress: PromiseOrValue<string>,
      _aglParameters: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDexTrader(
      _dexTrader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterestManager(
      _interestManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
