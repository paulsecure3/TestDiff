/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MultiTroveGetter {
  export type CombinedTroveDataStruct = {
    owner: PromiseOrValue<string>;
    asset: PromiseOrValue<string>;
    debt: PromiseOrValue<BigNumberish>;
    coll: PromiseOrValue<BigNumberish>;
    stake: PromiseOrValue<BigNumberish>;
    snapshotAsset: PromiseOrValue<BigNumberish>;
    snapshotVSTDebt: PromiseOrValue<BigNumberish>;
  };

  export type CombinedTroveDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    owner: string;
    asset: string;
    debt: BigNumber;
    coll: BigNumber;
    stake: BigNumber;
    snapshotAsset: BigNumber;
    snapshotVSTDebt: BigNumber;
  };
}

export interface MultiTroveGetterInterface extends utils.Interface {
  functions: {
    "getMultipleSortedTroves(address,int256,uint256)": FunctionFragment;
    "sortedTroves()": FunctionFragment;
    "troveManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMultipleSortedTroves"
      | "sortedTroves"
      | "troveManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMultipleSortedTroves",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sortedTroves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getMultipleSortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortedTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MultiTroveGetter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiTroveGetterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMultipleSortedTroves(
      _asset: PromiseOrValue<string>,
      _startIdx: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [MultiTroveGetter.CombinedTroveDataStructOutput[]] & {
        _troves: MultiTroveGetter.CombinedTroveDataStructOutput[];
      }
    >;

    sortedTroves(overrides?: CallOverrides): Promise<[string]>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;
  };

  getMultipleSortedTroves(
    _asset: PromiseOrValue<string>,
    _startIdx: PromiseOrValue<BigNumberish>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MultiTroveGetter.CombinedTroveDataStructOutput[]>;

  sortedTroves(overrides?: CallOverrides): Promise<string>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getMultipleSortedTroves(
      _asset: PromiseOrValue<string>,
      _startIdx: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MultiTroveGetter.CombinedTroveDataStructOutput[]>;

    sortedTroves(overrides?: CallOverrides): Promise<string>;

    troveManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getMultipleSortedTroves(
      _asset: PromiseOrValue<string>,
      _startIdx: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortedTroves(overrides?: CallOverrides): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getMultipleSortedTroves(
      _asset: PromiseOrValue<string>,
      _startIdx: PromiseOrValue<BigNumberish>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortedTroves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
