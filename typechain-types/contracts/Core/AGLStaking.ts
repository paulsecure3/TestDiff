/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AGLStakingInterface extends utils.Interface {
  functions: {
    "DECIMAL_PRECISION()": FunctionFragment;
    "F_ASSETS(address)": FunctionFragment;
    "F_USDA()": FunctionFragment;
    "NAME()": FunctionFragment;
    "activePoolAddress()": FunctionFragment;
    "aglToken()": FunctionFragment;
    "borrowerOperationsAddress()": FunctionFragment;
    "changeTreasuryAddress(address)": FunctionFragment;
    "getPendingAssetGain(address,address)": FunctionFragment;
    "getPendingUSDAGain(address)": FunctionFragment;
    "increaseF_Asset(address,uint256)": FunctionFragment;
    "increaseF_USDA(uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "redemptorAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sentToTreasuryTracker(address)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address)": FunctionFragment;
    "setRedemptorAddress(address)": FunctionFragment;
    "snapshots(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "totalAGLStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "troveManagerAddress()": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "usdaToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMAL_PRECISION"
      | "F_ASSETS"
      | "F_USDA"
      | "NAME"
      | "activePoolAddress"
      | "aglToken"
      | "borrowerOperationsAddress"
      | "changeTreasuryAddress"
      | "getPendingAssetGain"
      | "getPendingUSDAGain"
      | "increaseF_Asset"
      | "increaseF_USDA"
      | "isInitialized"
      | "owner"
      | "pause"
      | "paused"
      | "redemptorAddress"
      | "renounceOwnership"
      | "sentToTreasuryTracker"
      | "setAddresses"
      | "setRedemptorAddress"
      | "snapshots"
      | "stake"
      | "stakes"
      | "totalAGLStaked"
      | "transferOwnership"
      | "treasury"
      | "troveManagerAddress"
      | "unpause"
      | "unstake"
      | "usdaToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "F_ASSETS",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "F_USDA", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aglToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowerOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeTreasuryAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAssetGain",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingUSDAGain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseF_Asset",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseF_USDA",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sentToTreasuryTracker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptorAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshots",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAGLStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "troveManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "usdaToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "F_ASSETS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "F_USDA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aglToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAssetGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingUSDAGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseF_Asset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseF_USDA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sentToTreasuryTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAGLStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "troveManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdaToken", data: BytesLike): Result;

  events: {
    "AGLTokenAddressSet(address)": EventFragment;
    "ActivePoolAddressSet(address)": EventFragment;
    "AssetSent(address,address,uint256)": EventFragment;
    "BorrowerOperationsAddressSet(address)": EventFragment;
    "F_AssetUpdated(address,uint256)": EventFragment;
    "F_USDAUpdated(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SentToTreasury(address,uint256)": EventFragment;
    "StakeChanged(address,uint256)": EventFragment;
    "StakerSnapshotsUpdated(address,uint256,uint256)": EventFragment;
    "StakingGainsAssetWithdrawn(address,address,uint256)": EventFragment;
    "StakingGainsUSDAWithdrawn(address,uint256)": EventFragment;
    "TotalAGLStakedUpdated(uint256)": EventFragment;
    "TreasuryAddressChanged(address)": EventFragment;
    "TroveManagerAddressSet(address)": EventFragment;
    "USDATokenAddressSet(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLTokenAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "F_AssetUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "F_USDAUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentToTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerSnapshotsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingGainsAssetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingGainsUSDAWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalAGLStakedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDATokenAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AGLTokenAddressSetEventObject {
  _AGLTokenAddress: string;
}
export type AGLTokenAddressSetEvent = TypedEvent<
  [string],
  AGLTokenAddressSetEventObject
>;

export type AGLTokenAddressSetEventFilter =
  TypedEventFilter<AGLTokenAddressSetEvent>;

export interface ActivePoolAddressSetEventObject {
  _activePoolAddress: string;
}
export type ActivePoolAddressSetEvent = TypedEvent<
  [string],
  ActivePoolAddressSetEventObject
>;

export type ActivePoolAddressSetEventFilter =
  TypedEventFilter<ActivePoolAddressSetEvent>;

export interface AssetSentEventObject {
  _asset: string;
  _account: string;
  _amount: BigNumber;
}
export type AssetSentEvent = TypedEvent<
  [string, string, BigNumber],
  AssetSentEventObject
>;

export type AssetSentEventFilter = TypedEventFilter<AssetSentEvent>;

export interface BorrowerOperationsAddressSetEventObject {
  _borrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressSetEvent = TypedEvent<
  [string],
  BorrowerOperationsAddressSetEventObject
>;

export type BorrowerOperationsAddressSetEventFilter =
  TypedEventFilter<BorrowerOperationsAddressSetEvent>;

export interface F_AssetUpdatedEventObject {
  _asset: string;
  _F_ASSET: BigNumber;
}
export type F_AssetUpdatedEvent = TypedEvent<
  [string, BigNumber],
  F_AssetUpdatedEventObject
>;

export type F_AssetUpdatedEventFilter = TypedEventFilter<F_AssetUpdatedEvent>;

export interface F_USDAUpdatedEventObject {
  _F_USDA: BigNumber;
}
export type F_USDAUpdatedEvent = TypedEvent<
  [BigNumber],
  F_USDAUpdatedEventObject
>;

export type F_USDAUpdatedEventFilter = TypedEventFilter<F_USDAUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SentToTreasuryEventObject {
  _asset: string;
  _amount: BigNumber;
}
export type SentToTreasuryEvent = TypedEvent<
  [string, BigNumber],
  SentToTreasuryEventObject
>;

export type SentToTreasuryEventFilter = TypedEventFilter<SentToTreasuryEvent>;

export interface StakeChangedEventObject {
  staker: string;
  newStake: BigNumber;
}
export type StakeChangedEvent = TypedEvent<
  [string, BigNumber],
  StakeChangedEventObject
>;

export type StakeChangedEventFilter = TypedEventFilter<StakeChangedEvent>;

export interface StakerSnapshotsUpdatedEventObject {
  _staker: string;
  _F_Asset: BigNumber;
  _F_USDA: BigNumber;
}
export type StakerSnapshotsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakerSnapshotsUpdatedEventObject
>;

export type StakerSnapshotsUpdatedEventFilter =
  TypedEventFilter<StakerSnapshotsUpdatedEvent>;

export interface StakingGainsAssetWithdrawnEventObject {
  staker: string;
  asset: string;
  AssetGain: BigNumber;
}
export type StakingGainsAssetWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  StakingGainsAssetWithdrawnEventObject
>;

export type StakingGainsAssetWithdrawnEventFilter =
  TypedEventFilter<StakingGainsAssetWithdrawnEvent>;

export interface StakingGainsUSDAWithdrawnEventObject {
  staker: string;
  USDAGain: BigNumber;
}
export type StakingGainsUSDAWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  StakingGainsUSDAWithdrawnEventObject
>;

export type StakingGainsUSDAWithdrawnEventFilter =
  TypedEventFilter<StakingGainsUSDAWithdrawnEvent>;

export interface TotalAGLStakedUpdatedEventObject {
  _totalAGLStaked: BigNumber;
}
export type TotalAGLStakedUpdatedEvent = TypedEvent<
  [BigNumber],
  TotalAGLStakedUpdatedEventObject
>;

export type TotalAGLStakedUpdatedEventFilter =
  TypedEventFilter<TotalAGLStakedUpdatedEvent>;

export interface TreasuryAddressChangedEventObject {
  _treausury: string;
}
export type TreasuryAddressChangedEvent = TypedEvent<
  [string],
  TreasuryAddressChangedEventObject
>;

export type TreasuryAddressChangedEventFilter =
  TypedEventFilter<TreasuryAddressChangedEvent>;

export interface TroveManagerAddressSetEventObject {
  _troveManager: string;
}
export type TroveManagerAddressSetEvent = TypedEvent<
  [string],
  TroveManagerAddressSetEventObject
>;

export type TroveManagerAddressSetEventFilter =
  TypedEventFilter<TroveManagerAddressSetEvent>;

export interface USDATokenAddressSetEventObject {
  _usdaTokenAddress: string;
}
export type USDATokenAddressSetEvent = TypedEvent<
  [string],
  USDATokenAddressSetEventObject
>;

export type USDATokenAddressSetEventFilter =
  TypedEventFilter<USDATokenAddressSetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AGLStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AGLStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    F_ASSETS(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    F_USDA(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    activePoolAddress(overrides?: CallOverrides): Promise<[string]>;

    aglToken(overrides?: CallOverrides): Promise<[string]>;

    borrowerOperationsAddress(overrides?: CallOverrides): Promise<[string]>;

    changeTreasuryAddress(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPendingAssetGain(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingUSDAGain(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseF_Asset(
      _asset: PromiseOrValue<string>,
      _AssetFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseF_USDA(
      _USDAFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    redemptorAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sentToTreasuryTracker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAddresses(
      _usdaaTokenAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    snapshots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { F_USDA_Snapshot: BigNumber }>;

    stake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAGLStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    troveManagerAddress(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdaToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  F_ASSETS(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  F_USDA(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  activePoolAddress(overrides?: CallOverrides): Promise<string>;

  aglToken(overrides?: CallOverrides): Promise<string>;

  borrowerOperationsAddress(overrides?: CallOverrides): Promise<string>;

  changeTreasuryAddress(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPendingAssetGain(
    _asset: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingUSDAGain(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseF_Asset(
    _asset: PromiseOrValue<string>,
    _AssetFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseF_USDA(
    _USDAFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  redemptorAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sentToTreasuryTracker(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAddresses(
    _usdaaTokenAddress: PromiseOrValue<string>,
    _usdaTokenAddress: PromiseOrValue<string>,
    _troveManagerAddress: PromiseOrValue<string>,
    _borrowerOperationsAddress: PromiseOrValue<string>,
    _activePoolAddress: PromiseOrValue<string>,
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedemptorAddress(
    _redemptorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  snapshots(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    _AGLamount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAGLStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  troveManagerAddress(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _AGLamount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdaToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    F_ASSETS(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    F_USDA(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    activePoolAddress(overrides?: CallOverrides): Promise<string>;

    aglToken(overrides?: CallOverrides): Promise<string>;

    borrowerOperationsAddress(overrides?: CallOverrides): Promise<string>;

    changeTreasuryAddress(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingAssetGain(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingUSDAGain(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseF_Asset(
      _asset: PromiseOrValue<string>,
      _AssetFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseF_USDA(
      _USDAFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    redemptorAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sentToTreasuryTracker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddresses(
      _usdaaTokenAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAGLStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    troveManagerAddress(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdaToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AGLTokenAddressSet(address)"(
      _AGLTokenAddress?: null
    ): AGLTokenAddressSetEventFilter;
    AGLTokenAddressSet(_AGLTokenAddress?: null): AGLTokenAddressSetEventFilter;

    "ActivePoolAddressSet(address)"(
      _activePoolAddress?: null
    ): ActivePoolAddressSetEventFilter;
    ActivePoolAddressSet(
      _activePoolAddress?: null
    ): ActivePoolAddressSetEventFilter;

    "AssetSent(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _account?: PromiseOrValue<string> | null,
      _amount?: null
    ): AssetSentEventFilter;
    AssetSent(
      _asset?: PromiseOrValue<string> | null,
      _account?: PromiseOrValue<string> | null,
      _amount?: null
    ): AssetSentEventFilter;

    "BorrowerOperationsAddressSet(address)"(
      _borrowerOperationsAddress?: null
    ): BorrowerOperationsAddressSetEventFilter;
    BorrowerOperationsAddressSet(
      _borrowerOperationsAddress?: null
    ): BorrowerOperationsAddressSetEventFilter;

    "F_AssetUpdated(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _F_ASSET?: null
    ): F_AssetUpdatedEventFilter;
    F_AssetUpdated(
      _asset?: PromiseOrValue<string> | null,
      _F_ASSET?: null
    ): F_AssetUpdatedEventFilter;

    "F_USDAUpdated(uint256)"(_F_USDA?: null): F_USDAUpdatedEventFilter;
    F_USDAUpdated(_F_USDA?: null): F_USDAUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SentToTreasury(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _amount?: null
    ): SentToTreasuryEventFilter;
    SentToTreasury(
      _asset?: PromiseOrValue<string> | null,
      _amount?: null
    ): SentToTreasuryEventFilter;

    "StakeChanged(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      newStake?: null
    ): StakeChangedEventFilter;
    StakeChanged(
      staker?: PromiseOrValue<string> | null,
      newStake?: null
    ): StakeChangedEventFilter;

    "StakerSnapshotsUpdated(address,uint256,uint256)"(
      _staker?: null,
      _F_Asset?: null,
      _F_USDA?: null
    ): StakerSnapshotsUpdatedEventFilter;
    StakerSnapshotsUpdated(
      _staker?: null,
      _F_Asset?: null,
      _F_USDA?: null
    ): StakerSnapshotsUpdatedEventFilter;

    "StakingGainsAssetWithdrawn(address,address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      AssetGain?: null
    ): StakingGainsAssetWithdrawnEventFilter;
    StakingGainsAssetWithdrawn(
      staker?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      AssetGain?: null
    ): StakingGainsAssetWithdrawnEventFilter;

    "StakingGainsUSDAWithdrawn(address,uint256)"(
      staker?: PromiseOrValue<string> | null,
      USDAGain?: null
    ): StakingGainsUSDAWithdrawnEventFilter;
    StakingGainsUSDAWithdrawn(
      staker?: PromiseOrValue<string> | null,
      USDAGain?: null
    ): StakingGainsUSDAWithdrawnEventFilter;

    "TotalAGLStakedUpdated(uint256)"(
      _totalAGLStaked?: null
    ): TotalAGLStakedUpdatedEventFilter;
    TotalAGLStakedUpdated(
      _totalAGLStaked?: null
    ): TotalAGLStakedUpdatedEventFilter;

    "TreasuryAddressChanged(address)"(
      _treausury?: null
    ): TreasuryAddressChangedEventFilter;
    TreasuryAddressChanged(
      _treausury?: null
    ): TreasuryAddressChangedEventFilter;

    "TroveManagerAddressSet(address)"(
      _troveManager?: null
    ): TroveManagerAddressSetEventFilter;
    TroveManagerAddressSet(
      _troveManager?: null
    ): TroveManagerAddressSetEventFilter;

    "USDATokenAddressSet(address)"(
      _usdaTokenAddress?: null
    ): USDATokenAddressSetEventFilter;
    USDATokenAddressSet(
      _usdaTokenAddress?: null
    ): USDATokenAddressSetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    F_ASSETS(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    F_USDA(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    activePoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    aglToken(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerOperationsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    changeTreasuryAddress(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPendingAssetGain(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingUSDAGain(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseF_Asset(
      _asset: PromiseOrValue<string>,
      _AssetFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseF_USDA(
      _USDAFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    redemptorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sentToTreasuryTracker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddresses(
      _usdaaTokenAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    snapshots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAGLStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    troveManagerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdaToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    F_ASSETS(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    F_USDA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aglToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerOperationsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeTreasuryAddress(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPendingAssetGain(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingUSDAGain(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseF_Asset(
      _asset: PromiseOrValue<string>,
      _AssetFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseF_USDA(
      _USDAFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sentToTreasuryTracker(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _usdaaTokenAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    snapshots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAGLStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    troveManagerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _AGLamount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
