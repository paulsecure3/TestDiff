/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SortedTrovesInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "borrowerOperationsAddress()": FunctionFragment;
    "contains(address,address)": FunctionFragment;
    "data(address)": FunctionFragment;
    "findInsertPosition(address,uint256,address,address)": FunctionFragment;
    "getFirst(address)": FunctionFragment;
    "getLast(address)": FunctionFragment;
    "getMaxSize(address)": FunctionFragment;
    "getNext(address,address)": FunctionFragment;
    "getPrev(address,address)": FunctionFragment;
    "getSize(address)": FunctionFragment;
    "insert(address,address,uint256,address,address)": FunctionFragment;
    "isEmpty(address)": FunctionFragment;
    "isFull(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "reInsert(address,address,uint256,address,address)": FunctionFragment;
    "redemptorAddress()": FunctionFragment;
    "remove(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setParams(address,address)": FunctionFragment;
    "setRedemptorAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "troveManager()": FunctionFragment;
    "validInsertPosition(address,uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "borrowerOperationsAddress"
      | "contains"
      | "data"
      | "findInsertPosition"
      | "getFirst"
      | "getLast"
      | "getMaxSize"
      | "getNext"
      | "getPrev"
      | "getSize"
      | "insert"
      | "isEmpty"
      | "isFull"
      | "isInitialized"
      | "owner"
      | "reInsert"
      | "redemptorAddress"
      | "remove"
      | "renounceOwnership"
      | "setParams"
      | "setRedemptorAddress"
      | "transferOwnership"
      | "troveManager"
      | "validInsertPosition"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowerOperationsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "data",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "findInsertPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirst",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLast",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrev",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmpty",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFull",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reInsert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptorAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validInsertPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerOperationsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findInsertPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMaxSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reInsert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validInsertPosition",
    data: BytesLike
  ): Result;

  events: {
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NodeAdded(address,address,uint256)": EventFragment;
    "NodeRemoved(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
}

export interface BorrowerOperationsAddressChangedEventObject {
  _borrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string],
  BorrowerOperationsAddressChangedEventObject
>;

export type BorrowerOperationsAddressChangedEventFilter =
  TypedEventFilter<BorrowerOperationsAddressChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NodeAddedEventObject {
  _asset: string;
  _id: string;
  _NICR: BigNumber;
}
export type NodeAddedEvent = TypedEvent<
  [string, string, BigNumber],
  NodeAddedEventObject
>;

export type NodeAddedEventFilter = TypedEventFilter<NodeAddedEvent>;

export interface NodeRemovedEventObject {
  _asset: string;
  _id: string;
}
export type NodeRemovedEvent = TypedEvent<
  [string, string],
  NodeRemovedEventObject
>;

export type NodeRemovedEventFilter = TypedEventFilter<NodeRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _sortedDoublyLLAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _troveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface SortedTroves extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SortedTrovesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    borrowerOperationsAddress(overrides?: CallOverrides): Promise<[string]>;

    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    data(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        head: string;
        tail: string;
        maxSize: BigNumber;
        size: BigNumber;
      }
    >;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redemptorAddress(overrides?: CallOverrides): Promise<[string]>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  borrowerOperationsAddress(overrides?: CallOverrides): Promise<string>;

  contains(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  data(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      head: string;
      tail: string;
      maxSize: BigNumber;
      size: BigNumber;
    }
  >;

  findInsertPosition(
    _asset: PromiseOrValue<string>,
    _NICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getFirst(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLast(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMaxSize(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNext(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrev(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSize(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  insert(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    _NICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEmpty(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFull(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  reInsert(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    _newNICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redemptorAddress(overrides?: CallOverrides): Promise<string>;

  remove(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _troveManagerAddress: PromiseOrValue<string>,
    _borrowerOperationsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedemptorAddress(
    _redemptorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  validInsertPosition(
    _asset: PromiseOrValue<string>,
    _NICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    borrowerOperationsAddress(overrides?: CallOverrides): Promise<string>;

    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    data(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        head: string;
        tail: string;
        maxSize: BigNumber;
        size: BigNumber;
      }
    >;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptorAddress(overrides?: CallOverrides): Promise<string>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setParams(
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    troveManager(overrides?: CallOverrides): Promise<string>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BorrowerOperationsAddressChanged(address)"(
      _borrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;
    BorrowerOperationsAddressChanged(
      _borrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NodeAdded(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _id?: null,
      _NICR?: null
    ): NodeAddedEventFilter;
    NodeAdded(
      _asset?: PromiseOrValue<string> | null,
      _id?: null,
      _NICR?: null
    ): NodeAddedEventFilter;

    "NodeRemoved(address,address)"(
      _asset?: PromiseOrValue<string> | null,
      _id?: null
    ): NodeRemovedEventFilter;
    NodeRemoved(
      _asset?: PromiseOrValue<string> | null,
      _id?: null
    ): NodeRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _sortedDoublyLLAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _sortedDoublyLLAddress?: null
    ): SortedTrovesAddressChangedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _troveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _troveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerOperationsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    data(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redemptorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParams(
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerOperationsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    data(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newNICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redemptorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _troveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptorAddress(
      _redemptorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _NICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
