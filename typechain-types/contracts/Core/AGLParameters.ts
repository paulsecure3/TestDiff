/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AGLParametersInterface extends utils.Interface {
  functions: {
    "BORROWING_FEE_FLOOR(address)": FunctionFragment;
    "BORROWING_FEE_FLOOR_DEFAULT()": FunctionFragment;
    "BonusToSP(address)": FunctionFragment;
    "BonusToSP_DEFAULT()": FunctionFragment;
    "CCR(address)": FunctionFragment;
    "CCR_DEFAULT()": FunctionFragment;
    "DECIMAL_PRECISION()": FunctionFragment;
    "MAX_BORROWING_FEE(address)": FunctionFragment;
    "MAX_BORROWING_FEE_DEFAULT()": FunctionFragment;
    "MCR(address)": FunctionFragment;
    "MCR_DEFAULT()": FunctionFragment;
    "MIN_NET_DEBT(address)": FunctionFragment;
    "MIN_NET_DEBT_DEFAULT()": FunctionFragment;
    "NAME()": FunctionFragment;
    "PERCENT_DIVISOR(address)": FunctionFragment;
    "PERCENT_DIVISOR_DEFAULT()": FunctionFragment;
    "REDEMPTION_BLOCK_DAY()": FunctionFragment;
    "REDEMPTION_FEE_FLOOR(address)": FunctionFragment;
    "REDEMPTION_FEE_FLOOR_DEFAULT()": FunctionFragment;
    "REDEMPTION_MAX_FEE(address)": FunctionFragment;
    "REDEMPTION_MAX_FEE_DEFAULT()": FunctionFragment;
    "USDA_GAS_COMPENSATION(address)": FunctionFragment;
    "USDA_GAS_COMPENSATION_DEFAULT()": FunctionFragment;
    "_100pct()": FunctionFragment;
    "activePool()": FunctionFragment;
    "adminContract()": FunctionFragment;
    "defaultPool()": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "redemptionBlock(address)": FunctionFragment;
    "removeRedemptionBlock(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sanitizeParameters(address)": FunctionFragment;
    "setAddresses(address,address,address,address)": FunctionFragment;
    "setAdminContract(address)": FunctionFragment;
    "setAsDefault(address)": FunctionFragment;
    "setAsDefaultWithRemptionBlock(address,uint256)": FunctionFragment;
    "setBonusToSP(address,uint256)": FunctionFragment;
    "setBorrowingFeeFloor(address,uint256)": FunctionFragment;
    "setCCR(address,uint256)": FunctionFragment;
    "setCollateralParameters(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setMCR(address,uint256)": FunctionFragment;
    "setMaxBorrowingFee(address,uint256)": FunctionFragment;
    "setMinNetDebt(address,uint256)": FunctionFragment;
    "setPercentDivisor(address,uint256)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setRedemptionFeeFloor(address,uint256)": FunctionFragment;
    "setRedemptionFeeMax(address,uint256)": FunctionFragment;
    "setUSDAGasCompensation(address,uint256)": FunctionFragment;
    "setUSDAMintCap(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdaMintCap(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BORROWING_FEE_FLOOR"
      | "BORROWING_FEE_FLOOR_DEFAULT"
      | "BonusToSP"
      | "BonusToSP_DEFAULT"
      | "CCR"
      | "CCR_DEFAULT"
      | "DECIMAL_PRECISION"
      | "MAX_BORROWING_FEE"
      | "MAX_BORROWING_FEE_DEFAULT"
      | "MCR"
      | "MCR_DEFAULT"
      | "MIN_NET_DEBT"
      | "MIN_NET_DEBT_DEFAULT"
      | "NAME"
      | "PERCENT_DIVISOR"
      | "PERCENT_DIVISOR_DEFAULT"
      | "REDEMPTION_BLOCK_DAY"
      | "REDEMPTION_FEE_FLOOR"
      | "REDEMPTION_FEE_FLOOR_DEFAULT"
      | "REDEMPTION_MAX_FEE"
      | "REDEMPTION_MAX_FEE_DEFAULT"
      | "USDA_GAS_COMPENSATION"
      | "USDA_GAS_COMPENSATION_DEFAULT"
      | "_100pct"
      | "activePool"
      | "adminContract"
      | "defaultPool"
      | "isInitialized"
      | "owner"
      | "priceFeed"
      | "redemptionBlock"
      | "removeRedemptionBlock"
      | "renounceOwnership"
      | "sanitizeParameters"
      | "setAddresses"
      | "setAdminContract"
      | "setAsDefault"
      | "setAsDefaultWithRemptionBlock"
      | "setBonusToSP"
      | "setBorrowingFeeFloor"
      | "setCCR"
      | "setCollateralParameters"
      | "setMCR"
      | "setMaxBorrowingFee"
      | "setMinNetDebt"
      | "setPercentDivisor"
      | "setPriceFeed"
      | "setRedemptionFeeFloor"
      | "setRedemptionFeeMax"
      | "setUSDAGasCompensation"
      | "setUSDAMintCap"
      | "transferOwnership"
      | "usdaMintCap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "BORROWING_FEE_FLOOR_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BonusToSP",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "BonusToSP_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CCR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "CCR_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECIMAL_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BORROWING_FEE",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BORROWING_FEE_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MCR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "MCR_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_NET_DEBT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_NET_DEBT_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_BLOCK_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_FEE_FLOOR_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_MAX_FEE",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_MAX_FEE_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDA_GAS_COMPENSATION",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "USDA_GAS_COMPENSATION_DEFAULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_100pct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redemptionBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRedemptionBlock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sanitizeParameters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsDefault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsDefaultWithRemptionBlock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusToSP",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowingFeeFloor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCCR",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralParameters",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMCR",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxBorrowingFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinNetDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercentDivisor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFeeFloor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionFeeMax",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDAGasCompensation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDAMintCap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdaMintCap",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BORROWING_FEE_FLOOR_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "BonusToSP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BonusToSP_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CCR_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECIMAL_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BORROWING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BORROWING_FEE_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MCR_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_NET_DEBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_NET_DEBT_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_BLOCK_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_FEE_FLOOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_FEE_FLOOR_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_MAX_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_MAX_FEE_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDA_GAS_COMPENSATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDA_GAS_COMPENSATION_DEFAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_100pct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRedemptionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sanitizeParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAsDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAsDefaultWithRemptionBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusToSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowingFeeFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinNetDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPercentDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFeeFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionFeeMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDAGasCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDAMintCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdaMintCap",
    data: BytesLike
  ): Result;

  events: {
    "BonusToSPChanged(uint256,uint256)": EventFragment;
    "BorrowingFeeFloorChanged(uint256,uint256)": EventFragment;
    "CCRChanged(uint256,uint256)": EventFragment;
    "GasCompensationChanged(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MCRChanged(uint256,uint256)": EventFragment;
    "MaxBorrowingFeeChanged(uint256,uint256)": EventFragment;
    "MinNetDebtChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PercentDivisorChanged(uint256,uint256)": EventFragment;
    "PriceFeedChanged(address)": EventFragment;
    "RedemptionBlockRemoved(address)": EventFragment;
    "RedemptionFeeFloorChanged(uint256,uint256)": EventFragment;
    "RedemptionFeeMaxChanged(uint256,uint256)": EventFragment;
    "USDAMintCapChanged(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BonusToSPChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingFeeFloorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CCRChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasCompensationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MCRChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxBorrowingFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinNetDebtChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PercentDivisorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionBlockRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeFloorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedemptionFeeMaxChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDAMintCapChanged"): EventFragment;
}

export interface BonusToSPChangedEventObject {
  oldBonusToSP: BigNumber;
  newBonusToSP: BigNumber;
}
export type BonusToSPChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BonusToSPChangedEventObject
>;

export type BonusToSPChangedEventFilter =
  TypedEventFilter<BonusToSPChangedEvent>;

export interface BorrowingFeeFloorChangedEventObject {
  oldBorrowingFloorFee: BigNumber;
  newBorrowingFloorFee: BigNumber;
}
export type BorrowingFeeFloorChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BorrowingFeeFloorChangedEventObject
>;

export type BorrowingFeeFloorChangedEventFilter =
  TypedEventFilter<BorrowingFeeFloorChangedEvent>;

export interface CCRChangedEventObject {
  oldCCR: BigNumber;
  newCCR: BigNumber;
}
export type CCRChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  CCRChangedEventObject
>;

export type CCRChangedEventFilter = TypedEventFilter<CCRChangedEvent>;

export interface GasCompensationChangedEventObject {
  oldGasComp: BigNumber;
  newGasComp: BigNumber;
}
export type GasCompensationChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  GasCompensationChangedEventObject
>;

export type GasCompensationChangedEventFilter =
  TypedEventFilter<GasCompensationChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MCRChangedEventObject {
  oldMCR: BigNumber;
  newMCR: BigNumber;
}
export type MCRChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MCRChangedEventObject
>;

export type MCRChangedEventFilter = TypedEventFilter<MCRChangedEvent>;

export interface MaxBorrowingFeeChangedEventObject {
  oldMaxBorrowingFee: BigNumber;
  newMaxBorrowingFee: BigNumber;
}
export type MaxBorrowingFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MaxBorrowingFeeChangedEventObject
>;

export type MaxBorrowingFeeChangedEventFilter =
  TypedEventFilter<MaxBorrowingFeeChangedEvent>;

export interface MinNetDebtChangedEventObject {
  oldMinNet: BigNumber;
  newMinNet: BigNumber;
}
export type MinNetDebtChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinNetDebtChangedEventObject
>;

export type MinNetDebtChangedEventFilter =
  TypedEventFilter<MinNetDebtChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PercentDivisorChangedEventObject {
  oldPercentDiv: BigNumber;
  newPercentDiv: BigNumber;
}
export type PercentDivisorChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PercentDivisorChangedEventObject
>;

export type PercentDivisorChangedEventFilter =
  TypedEventFilter<PercentDivisorChangedEvent>;

export interface PriceFeedChangedEventObject {
  addr: string;
}
export type PriceFeedChangedEvent = TypedEvent<
  [string],
  PriceFeedChangedEventObject
>;

export type PriceFeedChangedEventFilter =
  TypedEventFilter<PriceFeedChangedEvent>;

export interface RedemptionBlockRemovedEventObject {
  _asset: string;
}
export type RedemptionBlockRemovedEvent = TypedEvent<
  [string],
  RedemptionBlockRemovedEventObject
>;

export type RedemptionBlockRemovedEventFilter =
  TypedEventFilter<RedemptionBlockRemovedEvent>;

export interface RedemptionFeeFloorChangedEventObject {
  oldRedemptionFeeFloor: BigNumber;
  newRedemptionFeeFloor: BigNumber;
}
export type RedemptionFeeFloorChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RedemptionFeeFloorChangedEventObject
>;

export type RedemptionFeeFloorChangedEventFilter =
  TypedEventFilter<RedemptionFeeFloorChangedEvent>;

export interface RedemptionFeeMaxChangedEventObject {
  oldRedemptionFee: BigNumber;
  newRedemptionFee: BigNumber;
}
export type RedemptionFeeMaxChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RedemptionFeeMaxChangedEventObject
>;

export type RedemptionFeeMaxChangedEventFilter =
  TypedEventFilter<RedemptionFeeMaxChangedEvent>;

export interface USDAMintCapChangedEventObject {
  _asset: string;
  _newCap: BigNumber;
}
export type USDAMintCapChangedEvent = TypedEvent<
  [string, BigNumber],
  USDAMintCapChangedEventObject
>;

export type USDAMintCapChangedEventFilter =
  TypedEventFilter<USDAMintCapChangedEvent>;

export interface AGLParameters extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AGLParametersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BORROWING_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BORROWING_FEE_FLOOR_DEFAULT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BonusToSP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BonusToSP_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_BORROWING_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_NET_DEBT(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    NAME(overrides?: CallOverrides): Promise<[string]>;

    PERCENT_DIVISOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDEMPTION_BLOCK_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDEMPTION_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REDEMPTION_FEE_FLOOR_DEFAULT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REDEMPTION_MAX_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REDEMPTION_MAX_FEE_DEFAULT(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDA_GAS_COMPENSATION(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    USDA_GAS_COMPENSATION_DEFAULT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _100pct(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePool(overrides?: CallOverrides): Promise<[string]>;

    adminContract(overrides?: CallOverrides): Promise<[string]>;

    defaultPool(overrides?: CallOverrides): Promise<[string]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    redemptionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeRedemptionBlock(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sanitizeParameters(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _activePool: PromiseOrValue<string>,
      _defaultPool: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAsDefault(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAsDefaultWithRemptionBlock(
      _asset: PromiseOrValue<string>,
      blockInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBonusToSP(
      _asset: PromiseOrValue<string>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowingFeeFloor(
      _asset: PromiseOrValue<string>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCCR(
      _asset: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollateralParameters(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      newCCR: PromiseOrValue<BigNumberish>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMCR(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxBorrowingFee(
      _asset: PromiseOrValue<string>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinNetDebt(
      _asset: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPercentDivisor(
      _asset: PromiseOrValue<string>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFeeFloor(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedemptionFeeMax(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUSDAGasCompensation(
      _asset: PromiseOrValue<string>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUSDAMintCap(
      _asset: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdaMintCap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BORROWING_FEE_FLOOR(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  BORROWING_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  BonusToSP(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  BonusToSP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  CCR(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  CCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_BORROWING_FEE(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  MCR(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_NET_DEBT(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  NAME(overrides?: CallOverrides): Promise<string>;

  PERCENT_DIVISOR(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  REDEMPTION_BLOCK_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  REDEMPTION_FEE_FLOOR(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  REDEMPTION_MAX_FEE(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  REDEMPTION_MAX_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  USDA_GAS_COMPENSATION(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  USDA_GAS_COMPENSATION_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

  _100pct(overrides?: CallOverrides): Promise<BigNumber>;

  activePool(overrides?: CallOverrides): Promise<string>;

  adminContract(overrides?: CallOverrides): Promise<string>;

  defaultPool(overrides?: CallOverrides): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  redemptionBlock(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeRedemptionBlock(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sanitizeParameters(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _activePool: PromiseOrValue<string>,
    _defaultPool: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _adminContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdminContract(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAsDefault(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAsDefaultWithRemptionBlock(
    _asset: PromiseOrValue<string>,
    blockInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBonusToSP(
    _asset: PromiseOrValue<string>,
    newBonusToSP: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowingFeeFloor(
    _asset: PromiseOrValue<string>,
    borrowingFeeFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCCR(
    _asset: PromiseOrValue<string>,
    newCCR: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollateralParameters(
    _asset: PromiseOrValue<string>,
    newMCR: PromiseOrValue<BigNumberish>,
    newCCR: PromiseOrValue<BigNumberish>,
    newBonusToSP: PromiseOrValue<BigNumberish>,
    gasCompensation: PromiseOrValue<BigNumberish>,
    minNetDebt: PromiseOrValue<BigNumberish>,
    precentDivisor: PromiseOrValue<BigNumberish>,
    borrowingFeeFloor: PromiseOrValue<BigNumberish>,
    maxBorrowingFee: PromiseOrValue<BigNumberish>,
    redemptionFeeFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMCR(
    _asset: PromiseOrValue<string>,
    newMCR: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxBorrowingFee(
    _asset: PromiseOrValue<string>,
    maxBorrowingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinNetDebt(
    _asset: PromiseOrValue<string>,
    minNetDebt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPercentDivisor(
    _asset: PromiseOrValue<string>,
    precentDivisor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFeeFloor(
    _asset: PromiseOrValue<string>,
    redemptionFeeFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedemptionFeeMax(
    _asset: PromiseOrValue<string>,
    redemptionFeeFloor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUSDAGasCompensation(
    _asset: PromiseOrValue<string>,
    gasCompensation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUSDAMintCap(
    _asset: PromiseOrValue<string>,
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdaMintCap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BORROWING_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BORROWING_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    BonusToSP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BonusToSP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    CCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BORROWING_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<string>;

    PERCENT_DIVISOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_BLOCK_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_MAX_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REDEMPTION_MAX_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    USDA_GAS_COMPENSATION(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    USDA_GAS_COMPENSATION_DEFAULT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<string>;

    adminContract(overrides?: CallOverrides): Promise<string>;

    defaultPool(overrides?: CallOverrides): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    redemptionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRedemptionBlock(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sanitizeParameters(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _activePool: PromiseOrValue<string>,
      _defaultPool: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsDefault(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsDefaultWithRemptionBlock(
      _asset: PromiseOrValue<string>,
      blockInDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBonusToSP(
      _asset: PromiseOrValue<string>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowingFeeFloor(
      _asset: PromiseOrValue<string>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCCR(
      _asset: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralParameters(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      newCCR: PromiseOrValue<BigNumberish>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMCR(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxBorrowingFee(
      _asset: PromiseOrValue<string>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinNetDebt(
      _asset: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPercentDivisor(
      _asset: PromiseOrValue<string>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFeeFloor(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedemptionFeeMax(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDAGasCompensation(
      _asset: PromiseOrValue<string>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDAMintCap(
      _asset: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdaMintCap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BonusToSPChanged(uint256,uint256)"(
      oldBonusToSP?: null,
      newBonusToSP?: null
    ): BonusToSPChangedEventFilter;
    BonusToSPChanged(
      oldBonusToSP?: null,
      newBonusToSP?: null
    ): BonusToSPChangedEventFilter;

    "BorrowingFeeFloorChanged(uint256,uint256)"(
      oldBorrowingFloorFee?: null,
      newBorrowingFloorFee?: null
    ): BorrowingFeeFloorChangedEventFilter;
    BorrowingFeeFloorChanged(
      oldBorrowingFloorFee?: null,
      newBorrowingFloorFee?: null
    ): BorrowingFeeFloorChangedEventFilter;

    "CCRChanged(uint256,uint256)"(
      oldCCR?: null,
      newCCR?: null
    ): CCRChangedEventFilter;
    CCRChanged(oldCCR?: null, newCCR?: null): CCRChangedEventFilter;

    "GasCompensationChanged(uint256,uint256)"(
      oldGasComp?: null,
      newGasComp?: null
    ): GasCompensationChangedEventFilter;
    GasCompensationChanged(
      oldGasComp?: null,
      newGasComp?: null
    ): GasCompensationChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MCRChanged(uint256,uint256)"(
      oldMCR?: null,
      newMCR?: null
    ): MCRChangedEventFilter;
    MCRChanged(oldMCR?: null, newMCR?: null): MCRChangedEventFilter;

    "MaxBorrowingFeeChanged(uint256,uint256)"(
      oldMaxBorrowingFee?: null,
      newMaxBorrowingFee?: null
    ): MaxBorrowingFeeChangedEventFilter;
    MaxBorrowingFeeChanged(
      oldMaxBorrowingFee?: null,
      newMaxBorrowingFee?: null
    ): MaxBorrowingFeeChangedEventFilter;

    "MinNetDebtChanged(uint256,uint256)"(
      oldMinNet?: null,
      newMinNet?: null
    ): MinNetDebtChangedEventFilter;
    MinNetDebtChanged(
      oldMinNet?: null,
      newMinNet?: null
    ): MinNetDebtChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PercentDivisorChanged(uint256,uint256)"(
      oldPercentDiv?: null,
      newPercentDiv?: null
    ): PercentDivisorChangedEventFilter;
    PercentDivisorChanged(
      oldPercentDiv?: null,
      newPercentDiv?: null
    ): PercentDivisorChangedEventFilter;

    "PriceFeedChanged(address)"(
      addr?: PromiseOrValue<string> | null
    ): PriceFeedChangedEventFilter;
    PriceFeedChanged(
      addr?: PromiseOrValue<string> | null
    ): PriceFeedChangedEventFilter;

    "RedemptionBlockRemoved(address)"(
      _asset?: null
    ): RedemptionBlockRemovedEventFilter;
    RedemptionBlockRemoved(_asset?: null): RedemptionBlockRemovedEventFilter;

    "RedemptionFeeFloorChanged(uint256,uint256)"(
      oldRedemptionFeeFloor?: null,
      newRedemptionFeeFloor?: null
    ): RedemptionFeeFloorChangedEventFilter;
    RedemptionFeeFloorChanged(
      oldRedemptionFeeFloor?: null,
      newRedemptionFeeFloor?: null
    ): RedemptionFeeFloorChangedEventFilter;

    "RedemptionFeeMaxChanged(uint256,uint256)"(
      oldRedemptionFee?: null,
      newRedemptionFee?: null
    ): RedemptionFeeMaxChangedEventFilter;
    RedemptionFeeMaxChanged(
      oldRedemptionFee?: null,
      newRedemptionFee?: null
    ): RedemptionFeeMaxChangedEventFilter;

    "USDAMintCapChanged(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _newCap?: null
    ): USDAMintCapChangedEventFilter;
    USDAMintCapChanged(
      _asset?: PromiseOrValue<string> | null,
      _newCap?: null
    ): USDAMintCapChangedEventFilter;
  };

  estimateGas: {
    BORROWING_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BORROWING_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    BonusToSP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BonusToSP_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    CCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BORROWING_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_BORROWING_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_NET_DEBT(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_NET_DEBT_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVISOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERCENT_DIVISOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_BLOCK_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REDEMPTION_FEE_FLOOR_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    REDEMPTION_MAX_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REDEMPTION_MAX_FEE_DEFAULT(overrides?: CallOverrides): Promise<BigNumber>;

    USDA_GAS_COMPENSATION(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    USDA_GAS_COMPENSATION_DEFAULT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _100pct(overrides?: CallOverrides): Promise<BigNumber>;

    activePool(overrides?: CallOverrides): Promise<BigNumber>;

    adminContract(overrides?: CallOverrides): Promise<BigNumber>;

    defaultPool(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    redemptionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeRedemptionBlock(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sanitizeParameters(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _activePool: PromiseOrValue<string>,
      _defaultPool: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAsDefault(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAsDefaultWithRemptionBlock(
      _asset: PromiseOrValue<string>,
      blockInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBonusToSP(
      _asset: PromiseOrValue<string>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowingFeeFloor(
      _asset: PromiseOrValue<string>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCCR(
      _asset: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollateralParameters(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      newCCR: PromiseOrValue<BigNumberish>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMCR(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxBorrowingFee(
      _asset: PromiseOrValue<string>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinNetDebt(
      _asset: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPercentDivisor(
      _asset: PromiseOrValue<string>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedemptionFeeFloor(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedemptionFeeMax(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUSDAGasCompensation(
      _asset: PromiseOrValue<string>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUSDAMintCap(
      _asset: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdaMintCap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BORROWING_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BORROWING_FEE_FLOOR_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BonusToSP(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BonusToSP_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CCR_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DECIMAL_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BORROWING_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_BORROWING_FEE_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MCR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MCR_DEFAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_NET_DEBT(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_NET_DEBT_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_DIVISOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_DIVISOR_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REDEMPTION_BLOCK_DAY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REDEMPTION_FEE_FLOOR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REDEMPTION_FEE_FLOOR_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REDEMPTION_MAX_FEE(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REDEMPTION_MAX_FEE_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDA_GAS_COMPENSATION(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDA_GAS_COMPENSATION_DEFAULT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _100pct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adminContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redemptionBlock(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeRedemptionBlock(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sanitizeParameters(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _activePool: PromiseOrValue<string>,
      _defaultPool: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdminContract(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAsDefault(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAsDefaultWithRemptionBlock(
      _asset: PromiseOrValue<string>,
      blockInDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBonusToSP(
      _asset: PromiseOrValue<string>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowingFeeFloor(
      _asset: PromiseOrValue<string>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCCR(
      _asset: PromiseOrValue<string>,
      newCCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralParameters(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      newCCR: PromiseOrValue<BigNumberish>,
      newBonusToSP: PromiseOrValue<BigNumberish>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      borrowingFeeFloor: PromiseOrValue<BigNumberish>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMCR(
      _asset: PromiseOrValue<string>,
      newMCR: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxBorrowingFee(
      _asset: PromiseOrValue<string>,
      maxBorrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinNetDebt(
      _asset: PromiseOrValue<string>,
      minNetDebt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPercentDivisor(
      _asset: PromiseOrValue<string>,
      precentDivisor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFeeFloor(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedemptionFeeMax(
      _asset: PromiseOrValue<string>,
      redemptionFeeFloor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUSDAGasCompensation(
      _asset: PromiseOrValue<string>,
      gasCompensation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUSDAMintCap(
      _asset: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdaMintCap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
