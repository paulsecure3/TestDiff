/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface LockedAGLInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "SIX_MONTHS()": FunctionFragment;
    "TWO_YEARS()": FunctionFragment;
    "addEntityVesting(address,uint256)": FunctionFragment;
    "claimAGLToken()": FunctionFragment;
    "entitiesVesting(address)": FunctionFragment;
    "getClaimableAGL(address)": FunctionFragment;
    "getUnassignAGLTokensAmount()": FunctionFragment;
    "isEntityExits(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "lowerEntityVesting(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeEntityVesting(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddresses(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferUnassignedAGL()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "SIX_MONTHS"
      | "TWO_YEARS"
      | "addEntityVesting"
      | "claimAGLToken"
      | "entitiesVesting"
      | "getClaimableAGL"
      | "getUnassignAGLTokensAmount"
      | "isEntityExits"
      | "isInitialized"
      | "lowerEntityVesting"
      | "owner"
      | "removeEntityVesting"
      | "renounceOwnership"
      | "setAddresses"
      | "transferOwnership"
      | "transferUnassignedAGL"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SIX_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TWO_YEARS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addEntityVesting",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAGLToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entitiesVesting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAGL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnassignAGLTokensAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEntityExits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lowerEntityVesting",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEntityVesting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferUnassignedAGL",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SIX_MONTHS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TWO_YEARS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addEntityVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAGLToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entitiesVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAGL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnassignAGLTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntityExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerEntityVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEntityVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferUnassignedAGL",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LockedAGL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockedAGLInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TWO_YEARS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addEntityVesting(
      _entity: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAGLToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entitiesVesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        createdDate: BigNumber;
        totalSupply: BigNumber;
        startVestingDate: BigNumber;
        endVestingDate: BigNumber;
        claimed: BigNumber;
      }
    >;

    getClaimableAGL(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimable: BigNumber }>;

    getUnassignAGLTokensAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    isEntityExits(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    lowerEntityVesting(
      _entity: PromiseOrValue<string>,
      newTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeEntityVesting(
      _entity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _aglAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferUnassignedAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  TWO_YEARS(overrides?: CallOverrides): Promise<BigNumber>;

  addEntityVesting(
    _entity: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAGLToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entitiesVesting(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      createdDate: BigNumber;
      totalSupply: BigNumber;
      startVestingDate: BigNumber;
      endVestingDate: BigNumber;
      claimed: BigNumber;
    }
  >;

  getClaimableAGL(
    _entity: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnassignAGLTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

  isEntityExits(
    _entity: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  lowerEntityVesting(
    _entity: PromiseOrValue<string>,
    newTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeEntityVesting(
    _entity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _aglAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferUnassignedAGL(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEARS(overrides?: CallOverrides): Promise<BigNumber>;

    addEntityVesting(
      _entity: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAGLToken(overrides?: CallOverrides): Promise<void>;

    entitiesVesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        createdDate: BigNumber;
        totalSupply: BigNumber;
        startVestingDate: BigNumber;
        endVestingDate: BigNumber;
        claimed: BigNumber;
      }
    >;

    getClaimableAGL(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnassignAGLTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    isEntityExits(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    lowerEntityVesting(
      _entity: PromiseOrValue<string>,
      newTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeEntityVesting(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _aglAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferUnassignedAGL(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    TWO_YEARS(overrides?: CallOverrides): Promise<BigNumber>;

    addEntityVesting(
      _entity: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAGLToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entitiesVesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableAGL(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnassignAGLTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    isEntityExits(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    lowerEntityVesting(
      _entity: PromiseOrValue<string>,
      newTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeEntityVesting(
      _entity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _aglAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferUnassignedAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIX_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TWO_YEARS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEntityVesting(
      _entity: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAGLToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entitiesVesting(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableAGL(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnassignAGLTokensAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEntityExits(
      _entity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowerEntityVesting(
      _entity: PromiseOrValue<string>,
      newTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEntityVesting(
      _entity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _aglAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferUnassignedAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
