/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface BorrowerOperationsScriptInterface extends utils.Interface {
  functions: {
    "adjustTrove(address,uint256,uint256,uint256,uint256,bool,address,address)": FunctionFragment;
    "claimCollateral(address)": FunctionFragment;
    "closeTrove(address)": FunctionFragment;
    "openTrove(address,uint256,uint256,uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustTrove"
      | "claimCollateral"
      | "closeTrove"
      | "openTrove"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openTrove", data: BytesLike): Result;

  events: {};
}

export interface BorrowerOperationsScript extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BorrowerOperationsScriptInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustTrove(
    _asset: PromiseOrValue<string>,
    _assetAmountSent: PromiseOrValue<BigNumberish>,
    _maxFee: PromiseOrValue<BigNumberish>,
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _debtChange: PromiseOrValue<BigNumberish>,
    isDebtIncrease: PromiseOrValue<boolean>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTrove(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openTrove(
    _asset: PromiseOrValue<string>,
    _assetAmountSent: PromiseOrValue<BigNumberish>,
    _maxFee: PromiseOrValue<BigNumberish>,
    _AGLmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _assetAmountSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _AGLmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
