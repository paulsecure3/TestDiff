/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type LockStruct = {
  user: PromiseOrValue<string>;
  autoLock: PromiseOrValue<boolean>;
  lockDays: PromiseOrValue<BigNumberish>;
  claimed: PromiseOrValue<BigNumberish>;
  end: PromiseOrValue<BigNumberish>;
  initialAmount: PromiseOrValue<BigNumberish>;
  cappedShare: PromiseOrValue<BigNumberish>;
  lastTimeClaimed: PromiseOrValue<BigNumberish>;
};

export type LockStructOutput = [
  string,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  user: string;
  autoLock: boolean;
  lockDays: BigNumber;
  claimed: BigNumber;
  end: BigNumber;
  initialAmount: BigNumber;
  cappedShare: BigNumber;
  lastTimeClaimed: BigNumber;
};

export interface SavingModuleInterface extends utils.Interface {
  functions: {
    "BPS()": FunctionFragment;
    "COMPOUND()": FunctionFragment;
    "YEAR_MINUTE()": FunctionFragment;
    "allocationBPS()": FunctionFragment;
    "claimAll(bool)": FunctionFragment;
    "claimAllStabilityPool()": FunctionFragment;
    "claimBatch(uint256[],bool)": FunctionFragment;
    "createLock(uint256,uint256,bool)": FunctionFragment;
    "depositUSDA(uint256)": FunctionFragment;
    "emergencyReserve()": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "getCropsOf(uint256)": FunctionFragment;
    "getCurrentLockReward(uint256)": FunctionFragment;
    "getLockById(uint256)": FunctionFragment;
    "getLocks()": FunctionFragment;
    "getShareOf(uint256)": FunctionFragment;
    "getUserLockIds(address)": FunctionFragment;
    "increaseLockDaysTo(uint256,uint128)": FunctionFragment;
    "interestCapBPS()": FunctionFragment;
    "interestMinted_DEPRECATED()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "lastVRRAmountReceived()": FunctionFragment;
    "maxLockDays()": FunctionFragment;
    "maxUSDA()": FunctionFragment;
    "netAssetsPerShareWAD()": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseDate()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardAllocation()": FunctionFragment;
    "setAllocation(uint16)": FunctionFragment;
    "setEmergencyReserve(address)": FunctionFragment;
    "setInterestCap(uint16)": FunctionFragment;
    "setMaxLockDays(uint256)": FunctionFragment;
    "setMaxSupply(uint256)": FunctionFragment;
    "setUp(address,address,address,uint16,uint16)": FunctionFragment;
    "setVRRManager(address)": FunctionFragment;
    "share()": FunctionFragment;
    "stabilityPool()": FunctionFragment;
    "stock()": FunctionFragment;
    "switchAutolock(uint256,bool)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usda()": FunctionFragment;
    "vrrGeneratedRevenueTracker()": FunctionFragment;
    "vrrManager()": FunctionFragment;
    "withdrawOldVRR()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BPS"
      | "COMPOUND"
      | "YEAR_MINUTE"
      | "allocationBPS"
      | "claimAll"
      | "claimAllStabilityPool"
      | "claimBatch"
      | "createLock"
      | "depositUSDA"
      | "emergencyReserve"
      | "exit"
      | "getCropsOf"
      | "getCurrentLockReward"
      | "getLockById"
      | "getLocks"
      | "getShareOf"
      | "getUserLockIds"
      | "increaseLockDaysTo"
      | "interestCapBPS"
      | "interestMinted_DEPRECATED"
      | "lastUpdate"
      | "lastVRRAmountReceived"
      | "maxLockDays"
      | "maxUSDA"
      | "netAssetsPerShareWAD"
      | "owner"
      | "releaseDate"
      | "renounceOwnership"
      | "rewardAllocation"
      | "setAllocation"
      | "setEmergencyReserve"
      | "setInterestCap"
      | "setMaxLockDays"
      | "setMaxSupply"
      | "setUp"
      | "setVRRManager"
      | "share"
      | "stabilityPool"
      | "stock"
      | "switchAutolock"
      | "totalWeight"
      | "transferOwnership"
      | "usda"
      | "vrrGeneratedRevenueTracker"
      | "vrrManager"
      | "withdrawOldVRR"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BPS", values?: undefined): string;
  encodeFunctionData(functionFragment: "COMPOUND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "YEAR_MINUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocationBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAll",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllStabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBatch",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDA",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCropsOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLockReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getLocks", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getShareOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLockDaysTo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "interestCapBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestMinted_DEPRECATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastVRRAmountReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLockDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxUSDA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "netAssetsPerShareWAD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyReserve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLockDays",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVRRManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "share", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "switchAutolock",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usda", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vrrGeneratedRevenueTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrrManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOldVRR",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BPS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "COMPOUND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YEAR_MINUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCropsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getShareOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLockDaysTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestCapBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestMinted_DEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastVRRAmountReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLockDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxUSDA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "netAssetsPerShareWAD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLockDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVRRManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "share", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchAutolock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usda", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrrGeneratedRevenueTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vrrManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOldVRR",
    data: BytesLike
  ): Result;

  events: {
    "ExitLock(address,uint256,uint256)": EventFragment;
    "Flee()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LockAutoLockChanged(uint256,bool)": EventFragment;
    "LockAutoLockTriggered(uint256,uint256)": EventFragment;
    "LockCreated(address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolUpdated(uint256,uint256)": EventFragment;
    "ShareUpdated(uint256)": EventFragment;
    "Tack(address,address,uint256)": EventFragment;
    "USDAReceveidFromVRR(uint256)": EventFragment;
    "UserClaimed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExitLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockAutoLockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockAutoLockTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDAReceveidFromVRR"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserClaimed"): EventFragment;
}

export interface ExitLockEventObject {
  user: string;
  lockId: BigNumber;
  usdaAmountReturned: BigNumber;
}
export type ExitLockEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ExitLockEventObject
>;

export type ExitLockEventFilter = TypedEventFilter<ExitLockEvent>;

export interface FleeEventObject {}
export type FleeEvent = TypedEvent<[], FleeEventObject>;

export type FleeEventFilter = TypedEventFilter<FleeEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LockAutoLockChangedEventObject {
  lockId: BigNumber;
  autolock: boolean;
}
export type LockAutoLockChangedEvent = TypedEvent<
  [BigNumber, boolean],
  LockAutoLockChangedEventObject
>;

export type LockAutoLockChangedEventFilter =
  TypedEventFilter<LockAutoLockChangedEvent>;

export interface LockAutoLockTriggeredEventObject {
  lockId: BigNumber;
  newEndTime: BigNumber;
}
export type LockAutoLockTriggeredEvent = TypedEvent<
  [BigNumber, BigNumber],
  LockAutoLockTriggeredEventObject
>;

export type LockAutoLockTriggeredEventFilter =
  TypedEventFilter<LockAutoLockTriggeredEvent>;

export interface LockCreatedEventObject {
  user: string;
  lockId: BigNumber;
  time: BigNumber;
  initialAmount: BigNumber;
}
export type LockCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LockCreatedEventObject
>;

export type LockCreatedEventFilter = TypedEventFilter<LockCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolUpdatedEventObject {
  addedReward: BigNumber;
  totalAllocatedUSDA: BigNumber;
}
export type PoolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolUpdatedEventObject
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface ShareUpdatedEventObject {
  val: BigNumber;
}
export type ShareUpdatedEvent = TypedEvent<
  [BigNumber],
  ShareUpdatedEventObject
>;

export type ShareUpdatedEventFilter = TypedEventFilter<ShareUpdatedEvent>;

export interface TackEventObject {
  src: string;
  dst: string;
  wad: BigNumber;
}
export type TackEvent = TypedEvent<
  [string, string, BigNumber],
  TackEventObject
>;

export type TackEventFilter = TypedEventFilter<TackEvent>;

export interface USDAReceveidFromVRREventObject {
  receivedUSDA: BigNumber;
}
export type USDAReceveidFromVRREvent = TypedEvent<
  [BigNumber],
  USDAReceveidFromVRREventObject
>;

export type USDAReceveidFromVRREventFilter =
  TypedEventFilter<USDAReceveidFromVRREvent>;

export interface UserClaimedEventObject {
  user: string;
  lockId: BigNumber;
  claimed: BigNumber;
}
export type UserClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UserClaimedEventObject
>;

export type UserClaimedEventFilter = TypedEventFilter<UserClaimedEvent>;

export interface SavingModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SavingModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPS(overrides?: CallOverrides): Promise<[number]>;

    COMPOUND(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEAR_MINUTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    allocationBPS(overrides?: CallOverrides): Promise<[number]>;

    claimAll(
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAllStabilityPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLock(
      _lockTime: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _autoLock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositUSDA(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyReserve(overrides?: CallOverrides): Promise<[string]>;

    exit(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentLockReward(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockById(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[LockStructOutput]>;

    getLocks(overrides?: CallOverrides): Promise<[LockStructOutput[]]>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLockIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    increaseLockDaysTo(
      _lockId: PromiseOrValue<BigNumberish>,
      _lockDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interestCapBPS(overrides?: CallOverrides): Promise<[number]>;

    interestMinted_DEPRECATED(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastVRRAmountReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLockDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxUSDA(overrides?: CallOverrides): Promise<[BigNumber]>;

    netAssetsPerShareWAD(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAllocation(
      _allocationBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyReserve(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterestCap(
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxLockDays(
      _maxDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSupply(
      _maxUSDA: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      _usda: PromiseOrValue<string>,
      _vrrManager: PromiseOrValue<string>,
      _stabilityPool: PromiseOrValue<string>,
      _allocationBPS: PromiseOrValue<BigNumberish>,
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVRRManager(
      _newVRRManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    share(overrides?: CallOverrides): Promise<[BigNumber]>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    stock(overrides?: CallOverrides): Promise<[BigNumber]>;

    switchAutolock(
      _lockId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usda(overrides?: CallOverrides): Promise<[string]>;

    vrrGeneratedRevenueTracker(overrides?: CallOverrides): Promise<[BigNumber]>;

    vrrManager(overrides?: CallOverrides): Promise<[string]>;

    withdrawOldVRR(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BPS(overrides?: CallOverrides): Promise<number>;

  COMPOUND(overrides?: CallOverrides): Promise<BigNumber>;

  YEAR_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

  allocationBPS(overrides?: CallOverrides): Promise<number>;

  claimAll(
    _removeExpired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAllStabilityPool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimBatch(
    _ids: PromiseOrValue<BigNumberish>[],
    _removeExpired: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLock(
    _lockTime: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _autoLock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositUSDA(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyReserve(overrides?: CallOverrides): Promise<string>;

  exit(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCropsOf(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentLockReward(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockById(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<LockStructOutput>;

  getLocks(overrides?: CallOverrides): Promise<LockStructOutput[]>;

  getShareOf(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLockIds(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  increaseLockDaysTo(
    _lockId: PromiseOrValue<BigNumberish>,
    _lockDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interestCapBPS(overrides?: CallOverrides): Promise<number>;

  interestMinted_DEPRECATED(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  lastVRRAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

  maxLockDays(overrides?: CallOverrides): Promise<BigNumber>;

  maxUSDA(overrides?: CallOverrides): Promise<BigNumber>;

  netAssetsPerShareWAD(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseDate(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  setAllocation(
    _allocationBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyReserve(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterestCap(
    _interestCapBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxLockDays(
    _maxDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSupply(
    _maxUSDA: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    _usda: PromiseOrValue<string>,
    _vrrManager: PromiseOrValue<string>,
    _stabilityPool: PromiseOrValue<string>,
    _allocationBPS: PromiseOrValue<BigNumberish>,
    _interestCapBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVRRManager(
    _newVRRManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  share(overrides?: CallOverrides): Promise<BigNumber>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  stock(overrides?: CallOverrides): Promise<BigNumber>;

  switchAutolock(
    _lockId: PromiseOrValue<BigNumberish>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usda(overrides?: CallOverrides): Promise<string>;

  vrrGeneratedRevenueTracker(overrides?: CallOverrides): Promise<BigNumber>;

  vrrManager(overrides?: CallOverrides): Promise<string>;

  withdrawOldVRR(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS(overrides?: CallOverrides): Promise<number>;

    COMPOUND(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    allocationBPS(overrides?: CallOverrides): Promise<number>;

    claimAll(
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllStabilityPool(overrides?: CallOverrides): Promise<void>;

    claimBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLock(
      _lockTime: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _autoLock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUSDA(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyReserve(overrides?: CallOverrides): Promise<string>;

    exit(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLockReward(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockById(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<LockStructOutput>;

    getLocks(overrides?: CallOverrides): Promise<LockStructOutput[]>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    increaseLockDaysTo(
      _lockId: PromiseOrValue<BigNumberish>,
      _lockDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    interestCapBPS(overrides?: CallOverrides): Promise<number>;

    interestMinted_DEPRECATED(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastVRRAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockDays(overrides?: CallOverrides): Promise<BigNumber>;

    maxUSDA(overrides?: CallOverrides): Promise<BigNumber>;

    netAssetsPerShareWAD(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseDate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    setAllocation(
      _allocationBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyReserve(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestCap(
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLockDays(
      _maxDays: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSupply(
      _maxUSDA: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      _usda: PromiseOrValue<string>,
      _vrrManager: PromiseOrValue<string>,
      _stabilityPool: PromiseOrValue<string>,
      _allocationBPS: PromiseOrValue<BigNumberish>,
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVRRManager(
      _newVRRManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    share(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    stock(overrides?: CallOverrides): Promise<BigNumber>;

    switchAutolock(
      _lockId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usda(overrides?: CallOverrides): Promise<string>;

    vrrGeneratedRevenueTracker(overrides?: CallOverrides): Promise<BigNumber>;

    vrrManager(overrides?: CallOverrides): Promise<string>;

    withdrawOldVRR(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ExitLock(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      lockId?: PromiseOrValue<BigNumberish> | null,
      usdaAmountReturned?: null
    ): ExitLockEventFilter;
    ExitLock(
      user?: PromiseOrValue<string> | null,
      lockId?: PromiseOrValue<BigNumberish> | null,
      usdaAmountReturned?: null
    ): ExitLockEventFilter;

    "Flee()"(): FleeEventFilter;
    Flee(): FleeEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LockAutoLockChanged(uint256,bool)"(
      lockId?: PromiseOrValue<BigNumberish> | null,
      autolock?: null
    ): LockAutoLockChangedEventFilter;
    LockAutoLockChanged(
      lockId?: PromiseOrValue<BigNumberish> | null,
      autolock?: null
    ): LockAutoLockChangedEventFilter;

    "LockAutoLockTriggered(uint256,uint256)"(
      lockId?: PromiseOrValue<BigNumberish> | null,
      newEndTime?: null
    ): LockAutoLockTriggeredEventFilter;
    LockAutoLockTriggered(
      lockId?: PromiseOrValue<BigNumberish> | null,
      newEndTime?: null
    ): LockAutoLockTriggeredEventFilter;

    "LockCreated(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      lockId?: PromiseOrValue<BigNumberish> | null,
      time?: null,
      initialAmount?: null
    ): LockCreatedEventFilter;
    LockCreated(
      user?: PromiseOrValue<string> | null,
      lockId?: PromiseOrValue<BigNumberish> | null,
      time?: null,
      initialAmount?: null
    ): LockCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolUpdated(uint256,uint256)"(
      addedReward?: null,
      totalAllocatedUSDA?: null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      addedReward?: null,
      totalAllocatedUSDA?: null
    ): PoolUpdatedEventFilter;

    "ShareUpdated(uint256)"(val?: null): ShareUpdatedEventFilter;
    ShareUpdated(val?: null): ShareUpdatedEventFilter;

    "Tack(address,address,uint256)"(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      wad?: null
    ): TackEventFilter;
    Tack(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      wad?: null
    ): TackEventFilter;

    "USDAReceveidFromVRR(uint256)"(
      receivedUSDA?: null
    ): USDAReceveidFromVRREventFilter;
    USDAReceveidFromVRR(receivedUSDA?: null): USDAReceveidFromVRREventFilter;

    "UserClaimed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      lockId?: PromiseOrValue<BigNumberish> | null,
      claimed?: null
    ): UserClaimedEventFilter;
    UserClaimed(
      user?: PromiseOrValue<string> | null,
      lockId?: PromiseOrValue<BigNumberish> | null,
      claimed?: null
    ): UserClaimedEventFilter;
  };

  estimateGas: {
    BPS(overrides?: CallOverrides): Promise<BigNumber>;

    COMPOUND(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR_MINUTE(overrides?: CallOverrides): Promise<BigNumber>;

    allocationBPS(overrides?: CallOverrides): Promise<BigNumber>;

    claimAll(
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAllStabilityPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLock(
      _lockTime: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _autoLock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositUSDA(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyReserve(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentLockReward(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockById(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocks(overrides?: CallOverrides): Promise<BigNumber>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLockDaysTo(
      _lockId: PromiseOrValue<BigNumberish>,
      _lockDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interestCapBPS(overrides?: CallOverrides): Promise<BigNumber>;

    interestMinted_DEPRECATED(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastVRRAmountReceived(overrides?: CallOverrides): Promise<BigNumber>;

    maxLockDays(overrides?: CallOverrides): Promise<BigNumber>;

    maxUSDA(overrides?: CallOverrides): Promise<BigNumber>;

    netAssetsPerShareWAD(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseDate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    setAllocation(
      _allocationBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyReserve(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterestCap(
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxLockDays(
      _maxDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSupply(
      _maxUSDA: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      _usda: PromiseOrValue<string>,
      _vrrManager: PromiseOrValue<string>,
      _stabilityPool: PromiseOrValue<string>,
      _allocationBPS: PromiseOrValue<BigNumberish>,
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVRRManager(
      _newVRRManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    share(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    stock(overrides?: CallOverrides): Promise<BigNumber>;

    switchAutolock(
      _lockId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usda(overrides?: CallOverrides): Promise<BigNumber>;

    vrrGeneratedRevenueTracker(overrides?: CallOverrides): Promise<BigNumber>;

    vrrManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawOldVRR(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    COMPOUND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEAR_MINUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocationBPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAll(
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAllStabilityPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimBatch(
      _ids: PromiseOrValue<BigNumberish>[],
      _removeExpired: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLock(
      _lockTime: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _autoLock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositUSDA(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLockReward(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockById(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLockIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLockDaysTo(
      _lockId: PromiseOrValue<BigNumberish>,
      _lockDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interestCapBPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestMinted_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastVRRAmountReceived(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLockDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxUSDA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    netAssetsPerShareWAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllocation(
      _allocationBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyReserve(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterestCap(
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLockDays(
      _maxDays: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSupply(
      _maxUSDA: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      _usda: PromiseOrValue<string>,
      _vrrManager: PromiseOrValue<string>,
      _stabilityPool: PromiseOrValue<string>,
      _allocationBPS: PromiseOrValue<BigNumberish>,
      _interestCapBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVRRManager(
      _newVRRManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    share(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchAutolock(
      _lockId: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usda(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrrGeneratedRevenueTracker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vrrManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawOldVRR(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
