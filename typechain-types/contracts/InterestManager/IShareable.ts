/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IShareableInterface extends utils.Interface {
  functions: {
    "getCropsOf(uint256)": FunctionFragment;
    "getShareOf(uint256)": FunctionFragment;
    "netAssetsPerShareWAD()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getCropsOf" | "getShareOf" | "netAssetsPerShareWAD"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCropsOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShareOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "netAssetsPerShareWAD",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getCropsOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getShareOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "netAssetsPerShareWAD",
    data: BytesLike
  ): Result;

  events: {
    "Flee()": EventFragment;
    "ShareUpdated(uint256)": EventFragment;
    "Tack(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Flee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tack"): EventFragment;
}

export interface FleeEventObject {}
export type FleeEvent = TypedEvent<[], FleeEventObject>;

export type FleeEventFilter = TypedEventFilter<FleeEvent>;

export interface ShareUpdatedEventObject {
  val: BigNumber;
}
export type ShareUpdatedEvent = TypedEvent<
  [BigNumber],
  ShareUpdatedEventObject
>;

export type ShareUpdatedEventFilter = TypedEventFilter<ShareUpdatedEvent>;

export interface TackEventObject {
  src: string;
  dst: string;
  wad: BigNumber;
}
export type TackEvent = TypedEvent<
  [string, string, BigNumber],
  TackEventObject
>;

export type TackEventFilter = TypedEventFilter<TackEvent>;

export interface IShareable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IShareableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    netAssetsPerShareWAD(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  getCropsOf(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShareOf(
    _lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  netAssetsPerShareWAD(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    netAssetsPerShareWAD(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Flee()"(): FleeEventFilter;
    Flee(): FleeEventFilter;

    "ShareUpdated(uint256)"(val?: null): ShareUpdatedEventFilter;
    ShareUpdated(val?: null): ShareUpdatedEventFilter;

    "Tack(address,address,uint256)"(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      wad?: null
    ): TackEventFilter;
    Tack(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      wad?: null
    ): TackEventFilter;
  };

  estimateGas: {
    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    netAssetsPerShareWAD(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getCropsOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShareOf(
      _lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    netAssetsPerShareWAD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
