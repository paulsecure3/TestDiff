/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICropJoinAdapterInterface extends utils.Interface {
  functions: {
    "shareOf(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "shareOf"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "shareOf",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "shareOf", data: BytesLike): Result;

  events: {
    "Exit(uint256)": EventFragment;
    "Flee()": EventFragment;
    "Join(uint256)": EventFragment;
    "Tack(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tack"): EventFragment;
}

export interface ExitEventObject {
  val: BigNumber;
}
export type ExitEvent = TypedEvent<[BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface FleeEventObject {}
export type FleeEvent = TypedEvent<[], FleeEventObject>;

export type FleeEventFilter = TypedEventFilter<FleeEvent>;

export interface JoinEventObject {
  val: BigNumber;
}
export type JoinEvent = TypedEvent<[BigNumber], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface TackEventObject {
  src: string;
  dst: string;
  wad: BigNumber;
}
export type TackEvent = TypedEvent<
  [string, string, BigNumber],
  TackEventObject
>;

export type TackEventFilter = TypedEventFilter<TackEvent>;

export interface ICropJoinAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICropJoinAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    shareOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  shareOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    shareOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Exit(uint256)"(val?: null): ExitEventFilter;
    Exit(val?: null): ExitEventFilter;

    "Flee()"(): FleeEventFilter;
    Flee(): FleeEventFilter;

    "Join(uint256)"(val?: null): JoinEventFilter;
    Join(val?: null): JoinEventFilter;

    "Tack(address,address,uint256)"(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      wad?: null
    ): TackEventFilter;
    Tack(
      src?: PromiseOrValue<string> | null,
      dst?: PromiseOrValue<string> | null,
      wad?: null
    ): TackEventFilter;
  };

  estimateGas: {
    shareOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    shareOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
