/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IStabilityPoolInterface extends utils.Interface {
  functions: {
    "getAssetBalance()": FunctionFragment;
    "getAssetType()": FunctionFragment;
    "getCompoundedTotalStake()": FunctionFragment;
    "getCompoundedUSDADeposit(address)": FunctionFragment;
    "getDepositorAGLGain(address)": FunctionFragment;
    "getDepositorAssetGain(address)": FunctionFragment;
    "getNameBytes()": FunctionFragment;
    "getTotalUSDADeposits()": FunctionFragment;
    "offset(uint256,uint256)": FunctionFragment;
    "provideToSP(uint256)": FunctionFragment;
    "receivedERC20(address,uint256)": FunctionFragment;
    "setAddresses(address,address,address,address,address,address,address)": FunctionFragment;
    "withdrawAssetGainToTrove(address,address)": FunctionFragment;
    "withdrawFromSP(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAssetBalance"
      | "getAssetType"
      | "getCompoundedTotalStake"
      | "getCompoundedUSDADeposit"
      | "getDepositorAGLGain"
      | "getDepositorAssetGain"
      | "getNameBytes"
      | "getTotalUSDADeposits"
      | "offset"
      | "provideToSP"
      | "receivedERC20"
      | "setAddresses"
      | "withdrawAssetGainToTrove"
      | "withdrawFromSP"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAssetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompoundedTotalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompoundedUSDADeposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorAGLGain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorAssetGain",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNameBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUSDADeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offset",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "provideToSP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAssetGainToTrove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromSP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundedTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundedUSDADeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorAGLGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorAssetGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNameBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUSDADeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideToSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAssetGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromSP",
    data: BytesLike
  ): Result;

  events: {
    "AGLPaidToDepositor(address,uint256)": EventFragment;
    "AssetGainWithdrawn(address,uint256,uint256)": EventFragment;
    "AssetSent(address,uint256)": EventFragment;
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "CommunityIssuanceAddressChanged(address)": EventFragment;
    "DefaultPoolAddressChanged(address)": EventFragment;
    "DepositSnapshotUpdated(address,uint256,uint256,uint256)": EventFragment;
    "EpochUpdated(uint128)": EventFragment;
    "G_Updated(uint256,uint128,uint128)": EventFragment;
    "P_Updated(uint256)": EventFragment;
    "S_Updated(uint256,uint128,uint128)": EventFragment;
    "ScaleUpdated(uint128)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolAssetBalanceUpdated(uint256)": EventFragment;
    "StabilityPoolUSDABalanceUpdated(uint256)": EventFragment;
    "StakeChanged(uint256,address)": EventFragment;
    "SystemSnapshotUpdated(uint256,uint256)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "USDATokenAddressChanged(address)": EventFragment;
    "UserDepositChanged(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLPaidToDepositor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetGainWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommunityIssuanceAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSnapshotUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "G_Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "P_Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "S_Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScaleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolAssetBalanceUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolUSDABalanceUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemSnapshotUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDATokenAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDepositChanged"): EventFragment;
}

export interface AGLPaidToDepositorEventObject {
  _depositor: string;
  _AGL: BigNumber;
}
export type AGLPaidToDepositorEvent = TypedEvent<
  [string, BigNumber],
  AGLPaidToDepositorEventObject
>;

export type AGLPaidToDepositorEventFilter =
  TypedEventFilter<AGLPaidToDepositorEvent>;

export interface AssetGainWithdrawnEventObject {
  _depositor: string;
  _Asset: BigNumber;
  _USDALoss: BigNumber;
}
export type AssetGainWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AssetGainWithdrawnEventObject
>;

export type AssetGainWithdrawnEventFilter =
  TypedEventFilter<AssetGainWithdrawnEvent>;

export interface AssetSentEventObject {
  _to: string;
  _amount: BigNumber;
}
export type AssetSentEvent = TypedEvent<
  [string, BigNumber],
  AssetSentEventObject
>;

export type AssetSentEventFilter = TypedEventFilter<AssetSentEvent>;

export interface BorrowerOperationsAddressChangedEventObject {
  _newBorrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string],
  BorrowerOperationsAddressChangedEventObject
>;

export type BorrowerOperationsAddressChangedEventFilter =
  TypedEventFilter<BorrowerOperationsAddressChangedEvent>;

export interface CommunityIssuanceAddressChangedEventObject {
  _newCommunityIssuanceAddress: string;
}
export type CommunityIssuanceAddressChangedEvent = TypedEvent<
  [string],
  CommunityIssuanceAddressChangedEventObject
>;

export type CommunityIssuanceAddressChangedEventFilter =
  TypedEventFilter<CommunityIssuanceAddressChangedEvent>;

export interface DefaultPoolAddressChangedEventObject {
  _newDefaultPoolAddress: string;
}
export type DefaultPoolAddressChangedEvent = TypedEvent<
  [string],
  DefaultPoolAddressChangedEventObject
>;

export type DefaultPoolAddressChangedEventFilter =
  TypedEventFilter<DefaultPoolAddressChangedEvent>;

export interface DepositSnapshotUpdatedEventObject {
  _depositor: string;
  _P: BigNumber;
  _S: BigNumber;
  _G: BigNumber;
}
export type DepositSnapshotUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  DepositSnapshotUpdatedEventObject
>;

export type DepositSnapshotUpdatedEventFilter =
  TypedEventFilter<DepositSnapshotUpdatedEvent>;

export interface EpochUpdatedEventObject {
  _currentEpoch: BigNumber;
}
export type EpochUpdatedEvent = TypedEvent<
  [BigNumber],
  EpochUpdatedEventObject
>;

export type EpochUpdatedEventFilter = TypedEventFilter<EpochUpdatedEvent>;

export interface G_UpdatedEventObject {
  _G: BigNumber;
  _epoch: BigNumber;
  _scale: BigNumber;
}
export type G_UpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  G_UpdatedEventObject
>;

export type G_UpdatedEventFilter = TypedEventFilter<G_UpdatedEvent>;

export interface P_UpdatedEventObject {
  _P: BigNumber;
}
export type P_UpdatedEvent = TypedEvent<[BigNumber], P_UpdatedEventObject>;

export type P_UpdatedEventFilter = TypedEventFilter<P_UpdatedEvent>;

export interface S_UpdatedEventObject {
  _S: BigNumber;
  _epoch: BigNumber;
  _scale: BigNumber;
}
export type S_UpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  S_UpdatedEventObject
>;

export type S_UpdatedEventFilter = TypedEventFilter<S_UpdatedEvent>;

export interface ScaleUpdatedEventObject {
  _currentScale: BigNumber;
}
export type ScaleUpdatedEvent = TypedEvent<
  [BigNumber],
  ScaleUpdatedEventObject
>;

export type ScaleUpdatedEventFilter = TypedEventFilter<ScaleUpdatedEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _newSortedTrovesAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface StabilityPoolAssetBalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type StabilityPoolAssetBalanceUpdatedEvent = TypedEvent<
  [BigNumber],
  StabilityPoolAssetBalanceUpdatedEventObject
>;

export type StabilityPoolAssetBalanceUpdatedEventFilter =
  TypedEventFilter<StabilityPoolAssetBalanceUpdatedEvent>;

export interface StabilityPoolUSDABalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type StabilityPoolUSDABalanceUpdatedEvent = TypedEvent<
  [BigNumber],
  StabilityPoolUSDABalanceUpdatedEventObject
>;

export type StabilityPoolUSDABalanceUpdatedEventFilter =
  TypedEventFilter<StabilityPoolUSDABalanceUpdatedEvent>;

export interface StakeChangedEventObject {
  _newSystemStake: BigNumber;
  _depositor: string;
}
export type StakeChangedEvent = TypedEvent<
  [BigNumber, string],
  StakeChangedEventObject
>;

export type StakeChangedEventFilter = TypedEventFilter<StakeChangedEvent>;

export interface SystemSnapshotUpdatedEventObject {
  _P: BigNumber;
  _G: BigNumber;
}
export type SystemSnapshotUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SystemSnapshotUpdatedEventObject
>;

export type SystemSnapshotUpdatedEventFilter =
  TypedEventFilter<SystemSnapshotUpdatedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _newTroveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface USDATokenAddressChangedEventObject {
  _newUSDATokenAddress: string;
}
export type USDATokenAddressChangedEvent = TypedEvent<
  [string],
  USDATokenAddressChangedEventObject
>;

export type USDATokenAddressChangedEventFilter =
  TypedEventFilter<USDATokenAddressChangedEvent>;

export interface UserDepositChangedEventObject {
  _depositor: string;
  _newDeposit: BigNumber;
}
export type UserDepositChangedEvent = TypedEvent<
  [string, BigNumber],
  UserDepositChangedEventObject
>;

export type UserDepositChangedEventFilter =
  TypedEventFilter<UserDepositChangedEvent>;

export interface IStabilityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStabilityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAssetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetType(overrides?: CallOverrides): Promise<[string]>;

    getCompoundedTotalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCompoundedUSDADeposit(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositorAGLGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositorAssetGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNameBytes(overrides?: CallOverrides): Promise<[string]>;

    getTotalUSDADeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    offset(
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _assetAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _communityIssuanceAddress: PromiseOrValue<string>,
      _vestaParamsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAssetGainToTrove(
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetType(overrides?: CallOverrides): Promise<string>;

  getCompoundedTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

  getCompoundedUSDADeposit(
    _depositor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositorAGLGain(
    _depositor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositorAssetGain(
    _depositor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNameBytes(overrides?: CallOverrides): Promise<string>;

  getTotalUSDADeposits(overrides?: CallOverrides): Promise<BigNumber>;

  offset(
    _debt: PromiseOrValue<BigNumberish>,
    _coll: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provideToSP(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receivedERC20(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _assetAddress: PromiseOrValue<string>,
    _borrowerOperationsAddress: PromiseOrValue<string>,
    _troveManagerAddress: PromiseOrValue<string>,
    _usdaTokenAddress: PromiseOrValue<string>,
    _sortedTrovesAddress: PromiseOrValue<string>,
    _communityIssuanceAddress: PromiseOrValue<string>,
    _vestaParamsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAssetGainToTrove(
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromSP(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetType(overrides?: CallOverrides): Promise<string>;

    getCompoundedTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedUSDADeposit(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorAGLGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorAssetGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNameBytes(overrides?: CallOverrides): Promise<string>;

    getTotalUSDADeposits(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _assetAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _communityIssuanceAddress: PromiseOrValue<string>,
      _vestaParamsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAssetGainToTrove(
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AGLPaidToDepositor(address,uint256)"(
      _depositor?: PromiseOrValue<string> | null,
      _AGL?: null
    ): AGLPaidToDepositorEventFilter;
    AGLPaidToDepositor(
      _depositor?: PromiseOrValue<string> | null,
      _AGL?: null
    ): AGLPaidToDepositorEventFilter;

    "AssetGainWithdrawn(address,uint256,uint256)"(
      _depositor?: PromiseOrValue<string> | null,
      _Asset?: null,
      _USDALoss?: null
    ): AssetGainWithdrawnEventFilter;
    AssetGainWithdrawn(
      _depositor?: PromiseOrValue<string> | null,
      _Asset?: null,
      _USDALoss?: null
    ): AssetGainWithdrawnEventFilter;

    "AssetSent(address,uint256)"(
      _to?: null,
      _amount?: null
    ): AssetSentEventFilter;
    AssetSent(_to?: null, _amount?: null): AssetSentEventFilter;

    "BorrowerOperationsAddressChanged(address)"(
      _newBorrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;
    BorrowerOperationsAddressChanged(
      _newBorrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;

    "CommunityIssuanceAddressChanged(address)"(
      _newCommunityIssuanceAddress?: null
    ): CommunityIssuanceAddressChangedEventFilter;
    CommunityIssuanceAddressChanged(
      _newCommunityIssuanceAddress?: null
    ): CommunityIssuanceAddressChangedEventFilter;

    "DefaultPoolAddressChanged(address)"(
      _newDefaultPoolAddress?: null
    ): DefaultPoolAddressChangedEventFilter;
    DefaultPoolAddressChanged(
      _newDefaultPoolAddress?: null
    ): DefaultPoolAddressChangedEventFilter;

    "DepositSnapshotUpdated(address,uint256,uint256,uint256)"(
      _depositor?: PromiseOrValue<string> | null,
      _P?: null,
      _S?: null,
      _G?: null
    ): DepositSnapshotUpdatedEventFilter;
    DepositSnapshotUpdated(
      _depositor?: PromiseOrValue<string> | null,
      _P?: null,
      _S?: null,
      _G?: null
    ): DepositSnapshotUpdatedEventFilter;

    "EpochUpdated(uint128)"(_currentEpoch?: null): EpochUpdatedEventFilter;
    EpochUpdated(_currentEpoch?: null): EpochUpdatedEventFilter;

    "G_Updated(uint256,uint128,uint128)"(
      _G?: null,
      _epoch?: null,
      _scale?: null
    ): G_UpdatedEventFilter;
    G_Updated(_G?: null, _epoch?: null, _scale?: null): G_UpdatedEventFilter;

    "P_Updated(uint256)"(_P?: null): P_UpdatedEventFilter;
    P_Updated(_P?: null): P_UpdatedEventFilter;

    "S_Updated(uint256,uint128,uint128)"(
      _S?: null,
      _epoch?: null,
      _scale?: null
    ): S_UpdatedEventFilter;
    S_Updated(_S?: null, _epoch?: null, _scale?: null): S_UpdatedEventFilter;

    "ScaleUpdated(uint128)"(_currentScale?: null): ScaleUpdatedEventFilter;
    ScaleUpdated(_currentScale?: null): ScaleUpdatedEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _newSortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _newSortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;

    "StabilityPoolAssetBalanceUpdated(uint256)"(
      _newBalance?: null
    ): StabilityPoolAssetBalanceUpdatedEventFilter;
    StabilityPoolAssetBalanceUpdated(
      _newBalance?: null
    ): StabilityPoolAssetBalanceUpdatedEventFilter;

    "StabilityPoolUSDABalanceUpdated(uint256)"(
      _newBalance?: null
    ): StabilityPoolUSDABalanceUpdatedEventFilter;
    StabilityPoolUSDABalanceUpdated(
      _newBalance?: null
    ): StabilityPoolUSDABalanceUpdatedEventFilter;

    "StakeChanged(uint256,address)"(
      _newSystemStake?: null,
      _depositor?: null
    ): StakeChangedEventFilter;
    StakeChanged(
      _newSystemStake?: null,
      _depositor?: null
    ): StakeChangedEventFilter;

    "SystemSnapshotUpdated(uint256,uint256)"(
      _P?: null,
      _G?: null
    ): SystemSnapshotUpdatedEventFilter;
    SystemSnapshotUpdated(
      _P?: null,
      _G?: null
    ): SystemSnapshotUpdatedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;

    "USDATokenAddressChanged(address)"(
      _newUSDATokenAddress?: null
    ): USDATokenAddressChangedEventFilter;
    USDATokenAddressChanged(
      _newUSDATokenAddress?: null
    ): USDATokenAddressChangedEventFilter;

    "UserDepositChanged(address,uint256)"(
      _depositor?: PromiseOrValue<string> | null,
      _newDeposit?: null
    ): UserDepositChangedEventFilter;
    UserDepositChanged(
      _depositor?: PromiseOrValue<string> | null,
      _newDeposit?: null
    ): UserDepositChangedEventFilter;
  };

  estimateGas: {
    getAssetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetType(overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedTotalStake(overrides?: CallOverrides): Promise<BigNumber>;

    getCompoundedUSDADeposit(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorAGLGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorAssetGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNameBytes(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalUSDADeposits(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _assetAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _communityIssuanceAddress: PromiseOrValue<string>,
      _vestaParamsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAssetGainToTrove(
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAssetBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompoundedTotalStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompoundedUSDADeposit(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositorAGLGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositorAssetGain(
      _depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNameBytes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalUSDADeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offset(
      _debt: PromiseOrValue<BigNumberish>,
      _coll: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provideToSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _assetAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _usdaTokenAddress: PromiseOrValue<string>,
      _sortedTrovesAddress: PromiseOrValue<string>,
      _communityIssuanceAddress: PromiseOrValue<string>,
      _vestaParamsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAssetGainToTrove(
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromSP(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
