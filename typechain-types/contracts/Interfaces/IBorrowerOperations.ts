/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IBorrowerOperationsInterface extends utils.Interface {
  functions: {
    "adjustTrove(address,uint256,uint256,uint256,uint256,bool,address,address)": FunctionFragment;
    "claimCollateral(address)": FunctionFragment;
    "claimCollaterals(address[])": FunctionFragment;
    "closeTrove(address)": FunctionFragment;
    "getCompositeDebt(address,uint256)": FunctionFragment;
    "moveETHGainToTrove(address,uint256,address,address,address)": FunctionFragment;
    "openTrove(address,uint256,uint256,uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustTrove"
      | "claimCollateral"
      | "claimCollaterals"
      | "closeTrove"
      | "getCompositeDebt"
      | "moveETHGainToTrove"
      | "openTrove"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCollaterals",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompositeDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveETHGainToTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCompositeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveETHGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTrove", data: BytesLike): Result;

  events: {
    "AGLStakingAddressChanged(address)": EventFragment;
    "CollSurplusPoolAddressChanged(address)": EventFragment;
    "GasPoolAddressChanged(address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolManagerAddressChanged(address)": EventFragment;
    "TroveCreated(address,address,uint256)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "TroveUpdated(address,address,uint256,uint256,uint256,uint8)": EventFragment;
    "USDABorrowingFeePaid(address,address,uint256)": EventFragment;
    "USDATokenAddressChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLStakingAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollSurplusPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolManagerAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDABorrowingFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDATokenAddressChanged"): EventFragment;
}

export interface AGLStakingAddressChangedEventObject {
  _aglStakingAddress: string;
}
export type AGLStakingAddressChangedEvent = TypedEvent<
  [string],
  AGLStakingAddressChangedEventObject
>;

export type AGLStakingAddressChangedEventFilter =
  TypedEventFilter<AGLStakingAddressChangedEvent>;

export interface CollSurplusPoolAddressChangedEventObject {
  _collSurplusPoolAddress: string;
}
export type CollSurplusPoolAddressChangedEvent = TypedEvent<
  [string],
  CollSurplusPoolAddressChangedEventObject
>;

export type CollSurplusPoolAddressChangedEventFilter =
  TypedEventFilter<CollSurplusPoolAddressChangedEvent>;

export interface GasPoolAddressChangedEventObject {
  _gasPoolAddress: string;
}
export type GasPoolAddressChangedEvent = TypedEvent<
  [string],
  GasPoolAddressChangedEventObject
>;

export type GasPoolAddressChangedEventFilter =
  TypedEventFilter<GasPoolAddressChangedEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _sortedTrovesAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface StabilityPoolManagerAddressChangedEventObject {
  _stabilityPoolAddress: string;
}
export type StabilityPoolManagerAddressChangedEvent = TypedEvent<
  [string],
  StabilityPoolManagerAddressChangedEventObject
>;

export type StabilityPoolManagerAddressChangedEventFilter =
  TypedEventFilter<StabilityPoolManagerAddressChangedEvent>;

export interface TroveCreatedEventObject {
  _asset: string;
  _borrower: string;
  arrayIndex: BigNumber;
}
export type TroveCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  TroveCreatedEventObject
>;

export type TroveCreatedEventFilter = TypedEventFilter<TroveCreatedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _newTroveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface TroveUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  stake: BigNumber;
  operation: number;
}
export type TroveUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, number],
  TroveUpdatedEventObject
>;

export type TroveUpdatedEventFilter = TypedEventFilter<TroveUpdatedEvent>;

export interface USDABorrowingFeePaidEventObject {
  _asset: string;
  _borrower: string;
  _USDAFee: BigNumber;
}
export type USDABorrowingFeePaidEvent = TypedEvent<
  [string, string, BigNumber],
  USDABorrowingFeePaidEventObject
>;

export type USDABorrowingFeePaidEventFilter =
  TypedEventFilter<USDABorrowingFeePaidEvent>;

export interface USDATokenAddressChangedEventObject {
  _usdaTokenAddress: string;
}
export type USDATokenAddressChangedEvent = TypedEvent<
  [string],
  USDATokenAddressChangedEventObject
>;

export type USDATokenAddressChangedEventFilter =
  TypedEventFilter<USDATokenAddressChangedEvent>;

export interface IBorrowerOperations extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBorrowerOperationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _USDAAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  adjustTrove(
    _asset: PromiseOrValue<string>,
    _assetSent: PromiseOrValue<BigNumberish>,
    _maxFee: PromiseOrValue<BigNumberish>,
    _collWithdrawal: PromiseOrValue<BigNumberish>,
    _debtChange: PromiseOrValue<BigNumberish>,
    isDebtIncrease: PromiseOrValue<boolean>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollateral(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCollaterals(
    _assets: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTrove(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCompositeDebt(
    _asset: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  moveETHGainToTrove(
    _asset: PromiseOrValue<string>,
    _amountMoved: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openTrove(
    _asset: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    _maxFee: PromiseOrValue<BigNumberish>,
    _USDAAmount: PromiseOrValue<BigNumberish>,
    _upperHint: PromiseOrValue<string>,
    _lowerHint: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _USDAAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AGLStakingAddressChanged(address)"(
      _aglStakingAddress?: null
    ): AGLStakingAddressChangedEventFilter;
    AGLStakingAddressChanged(
      _aglStakingAddress?: null
    ): AGLStakingAddressChangedEventFilter;

    "CollSurplusPoolAddressChanged(address)"(
      _collSurplusPoolAddress?: null
    ): CollSurplusPoolAddressChangedEventFilter;
    CollSurplusPoolAddressChanged(
      _collSurplusPoolAddress?: null
    ): CollSurplusPoolAddressChangedEventFilter;

    "GasPoolAddressChanged(address)"(
      _gasPoolAddress?: null
    ): GasPoolAddressChangedEventFilter;
    GasPoolAddressChanged(
      _gasPoolAddress?: null
    ): GasPoolAddressChangedEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;

    "StabilityPoolManagerAddressChanged(address)"(
      _stabilityPoolAddress?: null
    ): StabilityPoolManagerAddressChangedEventFilter;
    StabilityPoolManagerAddressChanged(
      _stabilityPoolAddress?: null
    ): StabilityPoolManagerAddressChangedEventFilter;

    "TroveCreated(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null
    ): TroveCreatedEventFilter;
    TroveCreated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      arrayIndex?: null
    ): TroveCreatedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;

    "TroveUpdated(address,address,uint256,uint256,uint256,uint8)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TroveUpdatedEventFilter;
    TroveUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TroveUpdatedEventFilter;

    "USDABorrowingFeePaid(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _USDAFee?: null
    ): USDABorrowingFeePaidEventFilter;
    USDABorrowingFeePaid(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _USDAFee?: null
    ): USDABorrowingFeePaidEventFilter;

    "USDATokenAddressChanged(address)"(
      _usdaTokenAddress?: null
    ): USDATokenAddressChangedEventFilter;
    USDATokenAddressChanged(
      _usdaTokenAddress?: null
    ): USDATokenAddressChangedEventFilter;
  };

  estimateGas: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _USDAAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustTrove(
      _asset: PromiseOrValue<string>,
      _assetSent: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _collWithdrawal: PromiseOrValue<BigNumberish>,
      _debtChange: PromiseOrValue<BigNumberish>,
      isDebtIncrease: PromiseOrValue<boolean>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCollaterals(
      _assets: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCompositeDebt(
      _asset: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveETHGainToTrove(
      _asset: PromiseOrValue<string>,
      _amountMoved: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openTrove(
      _asset: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      _USDAAmount: PromiseOrValue<BigNumberish>,
      _upperHint: PromiseOrValue<string>,
      _lowerHint: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
