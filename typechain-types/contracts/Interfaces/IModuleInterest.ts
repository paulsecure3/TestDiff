/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IModuleInterestInterface extends utils.Interface {
  functions: {
    "decreaseDebt(address,uint256)": FunctionFragment;
    "exit(address)": FunctionFragment;
    "getDebtOf(address)": FunctionFragment;
    "getNotEmittedInterestRate(address)": FunctionFragment;
    "increaseDebt(address,uint256)": FunctionFragment;
    "syncWithProtocol(uint256)": FunctionFragment;
    "updateEIR(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decreaseDebt"
      | "exit"
      | "getDebtOf"
      | "getNotEmittedInterestRate"
      | "increaseDebt"
      | "syncWithProtocol"
      | "updateEIR"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNotEmittedInterestRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "syncWithProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEIR",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDebtOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNotEmittedInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncWithProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateEIR", data: BytesLike): Result;

  events: {
    "DebtChanged(address,uint256)": EventFragment;
    "EIRChanged(uint256)": EventFragment;
    "InterestMinted(uint256)": EventFragment;
    "RiskChanged(uint8)": EventFragment;
    "SystemDebtChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DebtChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIRChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemDebtChanged"): EventFragment;
}

export interface DebtChangedEventObject {
  user: string;
  debt: BigNumber;
}
export type DebtChangedEvent = TypedEvent<
  [string, BigNumber],
  DebtChangedEventObject
>;

export type DebtChangedEventFilter = TypedEventFilter<DebtChangedEvent>;

export interface EIRChangedEventObject {
  newEIR: BigNumber;
}
export type EIRChangedEvent = TypedEvent<[BigNumber], EIRChangedEventObject>;

export type EIRChangedEventFilter = TypedEventFilter<EIRChangedEvent>;

export interface InterestMintedEventObject {
  interest: BigNumber;
}
export type InterestMintedEvent = TypedEvent<
  [BigNumber],
  InterestMintedEventObject
>;

export type InterestMintedEventFilter = TypedEventFilter<InterestMintedEvent>;

export interface RiskChangedEventObject {
  risk: number;
}
export type RiskChangedEvent = TypedEvent<[number], RiskChangedEventObject>;

export type RiskChangedEventFilter = TypedEventFilter<RiskChangedEvent>;

export interface SystemDebtChangedEventObject {
  debt: BigNumber;
}
export type SystemDebtChangedEvent = TypedEvent<
  [BigNumber],
  SystemDebtChangedEventObject
>;

export type SystemDebtChangedEventFilter =
  TypedEventFilter<SystemDebtChangedEvent>;

export interface IModuleInterest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModuleInterestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decreaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exit(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDebtOf(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNotEmittedInterestRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncWithProtocol(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEIR(
      _usdaPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  decreaseDebt(
    _vault: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exit(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDebtOf(
    _vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNotEmittedInterestRate(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseDebt(
    _vault: PromiseOrValue<string>,
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncWithProtocol(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEIR(
    _usdaPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decreaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtOf(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNotEmittedInterestRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncWithProtocol(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEIR(
      _usdaPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DebtChanged(address,uint256)"(
      user?: null,
      debt?: null
    ): DebtChangedEventFilter;
    DebtChanged(user?: null, debt?: null): DebtChangedEventFilter;

    "EIRChanged(uint256)"(newEIR?: null): EIRChangedEventFilter;
    EIRChanged(newEIR?: null): EIRChangedEventFilter;

    "InterestMinted(uint256)"(interest?: null): InterestMintedEventFilter;
    InterestMinted(interest?: null): InterestMintedEventFilter;

    "RiskChanged(uint8)"(risk?: null): RiskChangedEventFilter;
    RiskChanged(risk?: null): RiskChangedEventFilter;

    "SystemDebtChanged(uint256)"(debt?: null): SystemDebtChangedEventFilter;
    SystemDebtChanged(debt?: null): SystemDebtChangedEventFilter;
  };

  estimateGas: {
    decreaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exit(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDebtOf(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNotEmittedInterestRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncWithProtocol(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEIR(
      _usdaPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDebtOf(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNotEmittedInterestRate(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDebt(
      _vault: PromiseOrValue<string>,
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncWithProtocol(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEIR(
      _usdaPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
