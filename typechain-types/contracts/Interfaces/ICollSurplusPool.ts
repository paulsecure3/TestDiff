/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICollSurplusPoolInterface extends utils.Interface {
  functions: {
    "accountSurplus(address,address,uint256)": FunctionFragment;
    "claimColl(address,address)": FunctionFragment;
    "getAssetBalance(address)": FunctionFragment;
    "getCollateral(address,address)": FunctionFragment;
    "receivedERC20(address,uint256)": FunctionFragment;
    "setAddresses(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountSurplus"
      | "claimColl"
      | "getAssetBalance"
      | "getCollateral"
      | "receivedERC20"
      | "setAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountSurplus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimColl",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimColl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;

  events: {
    "ActivePoolAddressChanged(address)": EventFragment;
    "AssetSent(address,uint256)": EventFragment;
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "CollBalanceUpdated(address,uint256)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
}

export interface ActivePoolAddressChangedEventObject {
  _newActivePoolAddress: string;
}
export type ActivePoolAddressChangedEvent = TypedEvent<
  [string],
  ActivePoolAddressChangedEventObject
>;

export type ActivePoolAddressChangedEventFilter =
  TypedEventFilter<ActivePoolAddressChangedEvent>;

export interface AssetSentEventObject {
  _to: string;
  _amount: BigNumber;
}
export type AssetSentEvent = TypedEvent<
  [string, BigNumber],
  AssetSentEventObject
>;

export type AssetSentEventFilter = TypedEventFilter<AssetSentEvent>;

export interface BorrowerOperationsAddressChangedEventObject {
  _newBorrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string],
  BorrowerOperationsAddressChangedEventObject
>;

export type BorrowerOperationsAddressChangedEventFilter =
  TypedEventFilter<BorrowerOperationsAddressChangedEvent>;

export interface CollBalanceUpdatedEventObject {
  _account: string;
  _newBalance: BigNumber;
}
export type CollBalanceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  CollBalanceUpdatedEventObject
>;

export type CollBalanceUpdatedEventFilter =
  TypedEventFilter<CollBalanceUpdatedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _newTroveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface ICollSurplusPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICollSurplusPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountSurplus(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimColl(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollateral(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accountSurplus(
    _asset: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimColl(
    _asset: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetBalance(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateral(
    _asset: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  receivedERC20(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _borrowerOperationsAddress: PromiseOrValue<string>,
    _troveManagerAddress: PromiseOrValue<string>,
    _activePoolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountSurplus(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimColl(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateral(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActivePoolAddressChanged(address)"(
      _newActivePoolAddress?: null
    ): ActivePoolAddressChangedEventFilter;
    ActivePoolAddressChanged(
      _newActivePoolAddress?: null
    ): ActivePoolAddressChangedEventFilter;

    "AssetSent(address,uint256)"(
      _to?: null,
      _amount?: null
    ): AssetSentEventFilter;
    AssetSent(_to?: null, _amount?: null): AssetSentEventFilter;

    "BorrowerOperationsAddressChanged(address)"(
      _newBorrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;
    BorrowerOperationsAddressChanged(
      _newBorrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;

    "CollBalanceUpdated(address,uint256)"(
      _account?: PromiseOrValue<string> | null,
      _newBalance?: null
    ): CollBalanceUpdatedEventFilter;
    CollBalanceUpdated(
      _account?: PromiseOrValue<string> | null,
      _newBalance?: null
    ): CollBalanceUpdatedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
  };

  estimateGas: {
    accountSurplus(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimColl(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateral(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountSurplus(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimColl(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateral(
      _asset: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _borrowerOperationsAddress: PromiseOrValue<string>,
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
