/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAgilelyDexTrader {
  export type ManualExchangeStruct = {
    traderSelector: PromiseOrValue<BytesLike>;
    tokenInOut: [PromiseOrValue<string>, PromiseOrValue<string>];
    data: PromiseOrValue<BytesLike>;
  };

  export type ManualExchangeStructOutput = [
    string,
    [string, string],
    string
  ] & { traderSelector: string; tokenInOut: [string, string]; data: string };
}

export interface IAgilelyDexTraderInterface extends utils.Interface {
  functions: {
    "exchange(address,address,uint256,(bytes16,address[2],bytes)[])": FunctionFragment;
    "getAmountIn(uint256,(bytes16,address[2],bytes)[])": FunctionFragment;
    "getAmountOut(uint256,(bytes16,address[2],bytes)[])": FunctionFragment;
    "getTraderAddressWithSelector(bytes16)": FunctionFragment;
    "isRegisteredTrader(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "exchange"
      | "getAmountIn"
      | "getAmountOut"
      | "getTraderAddressWithSelector"
      | "isRegisteredTrader"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exchange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IAgilelyDexTrader.ManualExchangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [
      PromiseOrValue<BigNumberish>,
      IAgilelyDexTrader.ManualExchangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [
      PromiseOrValue<BigNumberish>,
      IAgilelyDexTrader.ManualExchangeStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderAddressWithSelector",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredTrader",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderAddressWithSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredTrader",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAgilelyDexTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAgilelyDexTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exchange(
      _receiver: PromiseOrValue<string>,
      _firstTokenIn: PromiseOrValue<string>,
      _firstAmountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTraderAddressWithSelector(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isRegisteredTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  exchange(
    _receiver: PromiseOrValue<string>,
    _firstTokenIn: PromiseOrValue<string>,
    _firstAmountIn: PromiseOrValue<BigNumberish>,
    _requests: IAgilelyDexTrader.ManualExchangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountIn(
    _amountOut: PromiseOrValue<BigNumberish>,
    _requests: IAgilelyDexTrader.ManualExchangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountOut(
    _amountIn: PromiseOrValue<BigNumberish>,
    _requests: IAgilelyDexTrader.ManualExchangeStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTraderAddressWithSelector(
    _selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isRegisteredTrader(
    _trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    exchange(
      _receiver: PromiseOrValue<string>,
      _firstTokenIn: PromiseOrValue<string>,
      _firstAmountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderAddressWithSelector(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isRegisteredTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    exchange(
      _receiver: PromiseOrValue<string>,
      _firstTokenIn: PromiseOrValue<string>,
      _firstAmountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTraderAddressWithSelector(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exchange(
      _receiver: PromiseOrValue<string>,
      _firstTokenIn: PromiseOrValue<string>,
      _firstAmountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _requests: IAgilelyDexTrader.ManualExchangeStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTraderAddressWithSelector(
      _selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredTrader(
      _trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
