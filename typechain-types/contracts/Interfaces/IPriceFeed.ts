/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IPriceFeedInterface extends utils.Interface {
  functions: {
    "addOracle(address,address,address)": FunctionFragment;
    "fetchPrice(address)": FunctionFragment;
    "getExternalPrice(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addOracle" | "fetchPrice" | "getExternalPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOracle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExternalPrice",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExternalPrice",
    data: BytesLike
  ): Result;

  events: {
    "LastGoodIndexUpdated(address,uint256)": EventFragment;
    "LastGoodPriceUpdated(address,uint256)": EventFragment;
    "PriceFeedStatusChanged(uint8)": EventFragment;
    "RegisteredNewOracle(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LastGoodIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LastGoodPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredNewOracle"): EventFragment;
}

export interface LastGoodIndexUpdatedEventObject {
  token: string;
  _lastGoodIndex: BigNumber;
}
export type LastGoodIndexUpdatedEvent = TypedEvent<
  [string, BigNumber],
  LastGoodIndexUpdatedEventObject
>;

export type LastGoodIndexUpdatedEventFilter =
  TypedEventFilter<LastGoodIndexUpdatedEvent>;

export interface LastGoodPriceUpdatedEventObject {
  token: string;
  _lastGoodPrice: BigNumber;
}
export type LastGoodPriceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  LastGoodPriceUpdatedEventObject
>;

export type LastGoodPriceUpdatedEventFilter =
  TypedEventFilter<LastGoodPriceUpdatedEvent>;

export interface PriceFeedStatusChangedEventObject {
  newStatus: number;
}
export type PriceFeedStatusChangedEvent = TypedEvent<
  [number],
  PriceFeedStatusChangedEventObject
>;

export type PriceFeedStatusChangedEventFilter =
  TypedEventFilter<PriceFeedStatusChangedEvent>;

export interface RegisteredNewOracleEventObject {
  token: string;
  chainLinkAggregator: string;
  chianLinkIndex: string;
}
export type RegisteredNewOracleEvent = TypedEvent<
  [string, string, string],
  RegisteredNewOracleEventObject
>;

export type RegisteredNewOracleEventFilter =
  TypedEventFilter<RegisteredNewOracleEvent>;

export interface IPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOracle(
      _token: PromiseOrValue<string>,
      _chainlinkOracle: PromiseOrValue<string>,
      _chainlinkIndexOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchPrice(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExternalPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addOracle(
    _token: PromiseOrValue<string>,
    _chainlinkOracle: PromiseOrValue<string>,
    _chainlinkIndexOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchPrice(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExternalPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addOracle(
      _token: PromiseOrValue<string>,
      _chainlinkOracle: PromiseOrValue<string>,
      _chainlinkIndexOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExternalPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LastGoodIndexUpdated(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      _lastGoodIndex?: null
    ): LastGoodIndexUpdatedEventFilter;
    LastGoodIndexUpdated(
      token?: PromiseOrValue<string> | null,
      _lastGoodIndex?: null
    ): LastGoodIndexUpdatedEventFilter;

    "LastGoodPriceUpdated(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      _lastGoodPrice?: null
    ): LastGoodPriceUpdatedEventFilter;
    LastGoodPriceUpdated(
      token?: PromiseOrValue<string> | null,
      _lastGoodPrice?: null
    ): LastGoodPriceUpdatedEventFilter;

    "PriceFeedStatusChanged(uint8)"(
      newStatus?: null
    ): PriceFeedStatusChangedEventFilter;
    PriceFeedStatusChanged(newStatus?: null): PriceFeedStatusChangedEventFilter;

    "RegisteredNewOracle(address,address,address)"(
      token?: null,
      chainLinkAggregator?: null,
      chianLinkIndex?: null
    ): RegisteredNewOracleEventFilter;
    RegisteredNewOracle(
      token?: null,
      chainLinkAggregator?: null,
      chianLinkIndex?: null
    ): RegisteredNewOracleEventFilter;
  };

  estimateGas: {
    addOracle(
      _token: PromiseOrValue<string>,
      _chainlinkOracle: PromiseOrValue<string>,
      _chainlinkIndexOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchPrice(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExternalPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOracle(
      _token: PromiseOrValue<string>,
      _chainlinkOracle: PromiseOrValue<string>,
      _chainlinkIndexOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchPrice(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExternalPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
