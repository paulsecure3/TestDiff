/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITroveManagerInterface extends utils.Interface {
  functions: {
    "Troves(address,address)": FunctionFragment;
    "addTroveOwnerToArray(address,address)": FunctionFragment;
    "aglParams()": FunctionFragment;
    "aglStaking()": FunctionFragment;
    "applyPendingRewards(address,address)": FunctionFragment;
    "batchLiquidateTroves(address,address[])": FunctionFragment;
    "checkRecoveryMode(address,uint256)": FunctionFragment;
    "closeTrove(address,address)": FunctionFragment;
    "closeTroveByRedemptor(address,address)": FunctionFragment;
    "decayBaseRateFromBorrowing(address)": FunctionFragment;
    "decreaseTroveColl(address,address,uint256)": FunctionFragment;
    "decreaseTroveDebt(address,address,uint256)": FunctionFragment;
    "getBorrowingFee(address,uint256)": FunctionFragment;
    "getBorrowingFeeWithDecay(address,uint256)": FunctionFragment;
    "getBorrowingRate(address)": FunctionFragment;
    "getBorrowingRateWithDecay(address)": FunctionFragment;
    "getCurrentICR(address,address,uint256)": FunctionFragment;
    "getEntireDebtAndColl(address,address)": FunctionFragment;
    "getNominalICR(address,address)": FunctionFragment;
    "getPendingAssetReward(address,address)": FunctionFragment;
    "getPendingUSDADebtReward(address,address)": FunctionFragment;
    "getRedemptionFee(address,uint256)": FunctionFragment;
    "getRedemptionFeeWithDecay(address,uint256)": FunctionFragment;
    "getRedemptionRate(address)": FunctionFragment;
    "getRedemptionRateWithDecay(address)": FunctionFragment;
    "getSystemTotalUnpaidInterest(address)": FunctionFragment;
    "getTCR(address,uint256)": FunctionFragment;
    "getTroveColl(address,address)": FunctionFragment;
    "getTroveDebt(address,address)": FunctionFragment;
    "getTroveFromTroveOwnersArray(address,uint256)": FunctionFragment;
    "getTroveOwnersCount(address)": FunctionFragment;
    "getTroveStake(address,address)": FunctionFragment;
    "getTroveStatus(address,address)": FunctionFragment;
    "getUnpaidInterestOfUser(address,address)": FunctionFragment;
    "hasPendingRewards(address,address)": FunctionFragment;
    "increaseTroveColl(address,address,uint256)": FunctionFragment;
    "increaseTroveDebt(address,address,uint256)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "liquidateTroves(address,uint256)": FunctionFragment;
    "removeStake(address,address)": FunctionFragment;
    "setTroveCollAndDebt(address,address,uint256,uint256)": FunctionFragment;
    "setTroveStatus(address,address,uint256)": FunctionFragment;
    "stabilityPoolManager()": FunctionFragment;
    "updateBaseRateFromRedemption(address,uint256,uint256,uint256)": FunctionFragment;
    "updateStakeAndTotalStakes(address,address)": FunctionFragment;
    "updateTroveRewardSnapshots(address,address)": FunctionFragment;
    "usdaToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Troves"
      | "addTroveOwnerToArray"
      | "aglParams"
      | "aglStaking"
      | "applyPendingRewards"
      | "batchLiquidateTroves"
      | "checkRecoveryMode"
      | "closeTrove"
      | "closeTroveByRedemptor"
      | "decayBaseRateFromBorrowing"
      | "decreaseTroveColl"
      | "decreaseTroveDebt"
      | "getBorrowingFee"
      | "getBorrowingFeeWithDecay"
      | "getBorrowingRate"
      | "getBorrowingRateWithDecay"
      | "getCurrentICR"
      | "getEntireDebtAndColl"
      | "getNominalICR"
      | "getPendingAssetReward"
      | "getPendingUSDADebtReward"
      | "getRedemptionFee"
      | "getRedemptionFeeWithDecay"
      | "getRedemptionRate"
      | "getRedemptionRateWithDecay"
      | "getSystemTotalUnpaidInterest"
      | "getTCR"
      | "getTroveColl"
      | "getTroveDebt"
      | "getTroveFromTroveOwnersArray"
      | "getTroveOwnersCount"
      | "getTroveStake"
      | "getTroveStatus"
      | "getUnpaidInterestOfUser"
      | "hasPendingRewards"
      | "increaseTroveColl"
      | "increaseTroveDebt"
      | "liquidate"
      | "liquidateTroves"
      | "removeStake"
      | "setTroveCollAndDebt"
      | "setTroveStatus"
      | "stabilityPoolManager"
      | "updateBaseRateFromRedemption"
      | "updateStakeAndTotalStakes"
      | "updateTroveRewardSnapshots"
      | "usdaToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Troves",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTroveOwnerToArray",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "aglParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aglStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyPendingRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchLiquidateTroves",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRecoveryMode",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTrove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTroveByRedemptor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decayBaseRateFromBorrowing",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTroveColl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseTroveDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingFeeWithDecay",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingRateWithDecay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentICR",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntireDebtAndColl",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNominalICR",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAssetReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingUSDADebtReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionFeeWithDecay",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionRateWithDecay",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemTotalUnpaidInterest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTCR",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveColl",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveFromTroveOwnersArray",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveOwnersCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStake",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroveStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaidInterestOfUser",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTroveColl",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTroveDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateTroves",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTroveCollAndDebt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTroveStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseRateFromRedemption",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeAndTotalStakes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTroveRewardSnapshots",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdaToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Troves", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTroveOwnerToArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aglParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aglStaking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchLiquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRecoveryMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTrove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeTroveByRedemptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decayBaseRateFromBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingFeeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntireDebtAndColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNominalICR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAssetReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingUSDADebtReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionFeeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionRateWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemTotalUnpaidInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveFromTroveOwnersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveOwnersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpaidInterestOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTroveColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTroveDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateTroves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTroveCollAndDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTroveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseRateFromRedemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeAndTotalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTroveRewardSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdaToken", data: BytesLike): Result;

  events: {
    "AGLStakingAddressChanged(address)": EventFragment;
    "BaseRateUpdated(address,uint256)": EventFragment;
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "CollSurplusPoolAddressChanged(address)": EventFragment;
    "GasPoolAddressChanged(address)": EventFragment;
    "LTermsUpdated(address,uint256,uint256)": EventFragment;
    "LastFeeOpTimeUpdated(address,uint256)": EventFragment;
    "Liquidation(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Redemption(address,uint256,uint256,uint256,uint256)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
    "StabilityPoolManagerAddressChanged(address)": EventFragment;
    "SystemSnapshotsUpdated(address,uint256,uint256)": EventFragment;
    "SystemUnpaidInterestUpdated(address,uint256)": EventFragment;
    "TotalStakesUpdated(address,uint256)": EventFragment;
    "TroveIndexUpdated(address,address,uint256)": EventFragment;
    "TroveLiquidated(address,address,uint256,uint256,uint8)": EventFragment;
    "TroveSnapshotsUpdated(address,uint256,uint256)": EventFragment;
    "TroveUpdated(address,address,uint256,uint256,uint256,uint8)": EventFragment;
    "USDATokenAddressChanged(address)": EventFragment;
    "VaultParametersBaseChanged(address)": EventFragment;
    "VaultUnpaidInterestUpdated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLStakingAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CollSurplusPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasPoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LTermsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LastFeeOpTimeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolManagerAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SystemSnapshotsUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SystemUnpaidInterestUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalStakesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveSnapshotsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDATokenAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultParametersBaseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultUnpaidInterestUpdated"): EventFragment;
}

export interface AGLStakingAddressChangedEventObject {
  _AGLStakingAddress: string;
}
export type AGLStakingAddressChangedEvent = TypedEvent<
  [string],
  AGLStakingAddressChangedEventObject
>;

export type AGLStakingAddressChangedEventFilter =
  TypedEventFilter<AGLStakingAddressChangedEvent>;

export interface BaseRateUpdatedEventObject {
  _asset: string;
  _baseRate: BigNumber;
}
export type BaseRateUpdatedEvent = TypedEvent<
  [string, BigNumber],
  BaseRateUpdatedEventObject
>;

export type BaseRateUpdatedEventFilter = TypedEventFilter<BaseRateUpdatedEvent>;

export interface BorrowerOperationsAddressChangedEventObject {
  _newBorrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string],
  BorrowerOperationsAddressChangedEventObject
>;

export type BorrowerOperationsAddressChangedEventFilter =
  TypedEventFilter<BorrowerOperationsAddressChangedEvent>;

export interface CollSurplusPoolAddressChangedEventObject {
  _collSurplusPoolAddress: string;
}
export type CollSurplusPoolAddressChangedEvent = TypedEvent<
  [string],
  CollSurplusPoolAddressChangedEventObject
>;

export type CollSurplusPoolAddressChangedEventFilter =
  TypedEventFilter<CollSurplusPoolAddressChangedEvent>;

export interface GasPoolAddressChangedEventObject {
  _gasPoolAddress: string;
}
export type GasPoolAddressChangedEvent = TypedEvent<
  [string],
  GasPoolAddressChangedEventObject
>;

export type GasPoolAddressChangedEventFilter =
  TypedEventFilter<GasPoolAddressChangedEvent>;

export interface LTermsUpdatedEventObject {
  _asset: string;
  _L_ETH: BigNumber;
  _L_USDADebt: BigNumber;
}
export type LTermsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LTermsUpdatedEventObject
>;

export type LTermsUpdatedEventFilter = TypedEventFilter<LTermsUpdatedEvent>;

export interface LastFeeOpTimeUpdatedEventObject {
  _asset: string;
  _lastFeeOpTime: BigNumber;
}
export type LastFeeOpTimeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  LastFeeOpTimeUpdatedEventObject
>;

export type LastFeeOpTimeUpdatedEventFilter =
  TypedEventFilter<LastFeeOpTimeUpdatedEvent>;

export interface LiquidationEventObject {
  _asset: string;
  _liquidatedDebt: BigNumber;
  _liquidatedColl: BigNumber;
  _collGasCompensation: BigNumber;
  _USDAGasCompensation: BigNumber;
}
export type LiquidationEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidationEventObject
>;

export type LiquidationEventFilter = TypedEventFilter<LiquidationEvent>;

export interface RedemptionEventObject {
  _asset: string;
  _attemptedAGLmount: BigNumber;
  _actualAGLmount: BigNumber;
  _AssetSent: BigNumber;
  _AssetFee: BigNumber;
}
export type RedemptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  RedemptionEventObject
>;

export type RedemptionEventFilter = TypedEventFilter<RedemptionEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _sortedTrovesAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface StabilityPoolManagerAddressChangedEventObject {
  _stabilityPoolManagerAddress: string;
}
export type StabilityPoolManagerAddressChangedEvent = TypedEvent<
  [string],
  StabilityPoolManagerAddressChangedEventObject
>;

export type StabilityPoolManagerAddressChangedEventFilter =
  TypedEventFilter<StabilityPoolManagerAddressChangedEvent>;

export interface SystemSnapshotsUpdatedEventObject {
  _asset: string;
  _totalStakesSnapshot: BigNumber;
  _totalCollateralSnapshot: BigNumber;
}
export type SystemSnapshotsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SystemSnapshotsUpdatedEventObject
>;

export type SystemSnapshotsUpdatedEventFilter =
  TypedEventFilter<SystemSnapshotsUpdatedEvent>;

export interface SystemUnpaidInterestUpdatedEventObject {
  _asset: string;
  unpaidInterest: BigNumber;
}
export type SystemUnpaidInterestUpdatedEvent = TypedEvent<
  [string, BigNumber],
  SystemUnpaidInterestUpdatedEventObject
>;

export type SystemUnpaidInterestUpdatedEventFilter =
  TypedEventFilter<SystemUnpaidInterestUpdatedEvent>;

export interface TotalStakesUpdatedEventObject {
  _asset: string;
  _newTotalStakes: BigNumber;
}
export type TotalStakesUpdatedEvent = TypedEvent<
  [string, BigNumber],
  TotalStakesUpdatedEventObject
>;

export type TotalStakesUpdatedEventFilter =
  TypedEventFilter<TotalStakesUpdatedEvent>;

export interface TroveIndexUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _newIndex: BigNumber;
}
export type TroveIndexUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  TroveIndexUpdatedEventObject
>;

export type TroveIndexUpdatedEventFilter =
  TypedEventFilter<TroveIndexUpdatedEvent>;

export interface TroveLiquidatedEventObject {
  _asset: string;
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  operation: number;
}
export type TroveLiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, number],
  TroveLiquidatedEventObject
>;

export type TroveLiquidatedEventFilter = TypedEventFilter<TroveLiquidatedEvent>;

export interface TroveSnapshotsUpdatedEventObject {
  _asset: string;
  _L_ETH: BigNumber;
  _L_USDADebt: BigNumber;
}
export type TroveSnapshotsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TroveSnapshotsUpdatedEventObject
>;

export type TroveSnapshotsUpdatedEventFilter =
  TypedEventFilter<TroveSnapshotsUpdatedEvent>;

export interface TroveUpdatedEventObject {
  _asset: string;
  _borrower: string;
  _debt: BigNumber;
  _coll: BigNumber;
  stake: BigNumber;
  operation: number;
}
export type TroveUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, number],
  TroveUpdatedEventObject
>;

export type TroveUpdatedEventFilter = TypedEventFilter<TroveUpdatedEvent>;

export interface USDATokenAddressChangedEventObject {
  _USDATokenAddress: string;
}
export type USDATokenAddressChangedEvent = TypedEvent<
  [string],
  USDATokenAddressChangedEventObject
>;

export type USDATokenAddressChangedEventFilter =
  TypedEventFilter<USDATokenAddressChangedEvent>;

export interface VaultParametersBaseChangedEventObject {
  newAddress: string;
}
export type VaultParametersBaseChangedEvent = TypedEvent<
  [string],
  VaultParametersBaseChangedEventObject
>;

export type VaultParametersBaseChangedEventFilter =
  TypedEventFilter<VaultParametersBaseChangedEvent>;

export interface VaultUnpaidInterestUpdatedEventObject {
  _asset: string;
  _vault: string;
  unpaidInterest: BigNumber;
}
export type VaultUnpaidInterestUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  VaultUnpaidInterestUpdatedEventObject
>;

export type VaultUnpaidInterestUpdatedEventFilter =
  TypedEventFilter<VaultUnpaidInterestUpdatedEvent>;

export interface ITroveManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITroveManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Troves(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        asset: string;
        debt: BigNumber;
        coll: BigNumber;
        stake: BigNumber;
        status: number;
        arrayIndex: BigNumber;
      }
    >;

    addTroveOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aglParams(overrides?: CallOverrides): Promise<[string]>;

    aglStaking(overrides?: CallOverrides): Promise<[string]>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchLiquidateTroves(
      _asset: PromiseOrValue<string>,
      _troveArray: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeTroveByRedemptor(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decayBaseRateFromBorrowing(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decreaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowingFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowingRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBorrowingRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingUSDADebtReward: BigNumber;
        pendingAssetReward: BigNumber;
      }
    >;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingUSDADebtReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSystemTotalUnpaidInterest(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveFromTroveOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTroveOwnersCount(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnpaidInterestOfUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _asset: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateTroves(
      _asset: PromiseOrValue<string>,
      _n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTroveCollAndDebt(
      _borrower: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stabilityPoolManager(overrides?: CallOverrides): Promise<[string]>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _ETHDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalUSDASupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTroveRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdaToken(overrides?: CallOverrides): Promise<[string]>;
  };

  Troves(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      asset: string;
      debt: BigNumber;
      coll: BigNumber;
      stake: BigNumber;
      status: number;
      arrayIndex: BigNumber;
    }
  >;

  addTroveOwnerToArray(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aglParams(overrides?: CallOverrides): Promise<string>;

  aglStaking(overrides?: CallOverrides): Promise<string>;

  applyPendingRewards(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchLiquidateTroves(
    _asset: PromiseOrValue<string>,
    _troveArray: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkRecoveryMode(
    _asset: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTrove(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeTroveByRedemptor(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decayBaseRateFromBorrowing(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseTroveColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _collDecrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decreaseTroveDebt(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _collDecrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBorrowingFee(
    _asset: PromiseOrValue<string>,
    USDADebt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowingFeeWithDecay(
    _asset: PromiseOrValue<string>,
    _USDADebt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowingRate(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBorrowingRateWithDecay(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentICR(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntireDebtAndColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      debt: BigNumber;
      coll: BigNumber;
      pendingUSDADebtReward: BigNumber;
      pendingAssetReward: BigNumber;
    }
  >;

  getNominalICR(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingAssetReward(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingUSDADebtReward(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionFee(
    _asset: PromiseOrValue<string>,
    _assetDraw: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionFeeWithDecay(
    _asset: PromiseOrValue<string>,
    _assetDraw: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionRate(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionRateWithDecay(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSystemTotalUnpaidInterest(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTCR(
    _asset: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveDebt(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveFromTroveOwnersArray(
    _asset: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTroveOwnersCount(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveStake(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTroveStatus(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnpaidInterestOfUser(
    _asset: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasPendingRewards(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseTroveColl(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _collIncrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseTroveDebt(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _debtIncrease: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _asset: PromiseOrValue<string>,
    borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateTroves(
    _asset: PromiseOrValue<string>,
    _n: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeStake(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTroveCollAndDebt(
    _borrower: PromiseOrValue<string>,
    _asset: PromiseOrValue<string>,
    _newDebt: PromiseOrValue<BigNumberish>,
    _newColl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTroveStatus(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    num: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stabilityPoolManager(overrides?: CallOverrides): Promise<string>;

  updateBaseRateFromRedemption(
    _asset: PromiseOrValue<string>,
    _ETHDrawn: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _totalUSDASupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStakeAndTotalStakes(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTroveRewardSnapshots(
    _asset: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdaToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Troves(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        asset: string;
        debt: BigNumber;
        coll: BigNumber;
        stake: BigNumber;
        status: number;
        arrayIndex: BigNumber;
      }
    >;

    addTroveOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aglParams(overrides?: CallOverrides): Promise<string>;

    aglStaking(overrides?: CallOverrides): Promise<string>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchLiquidateTroves(
      _asset: PromiseOrValue<string>,
      _troveArray: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTroveByRedemptor(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decayBaseRateFromBorrowing(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    decreaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        debt: BigNumber;
        coll: BigNumber;
        pendingUSDADebtReward: BigNumber;
        pendingAssetReward: BigNumber;
      }
    >;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingUSDADebtReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemTotalUnpaidInterest(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveFromTroveOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTroveOwnersCount(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidInterestOfUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _asset: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateTroves(
      _asset: PromiseOrValue<string>,
      _n: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTroveCollAndDebt(
      _borrower: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityPoolManager(overrides?: CallOverrides): Promise<string>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _ETHDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalUSDASupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTroveRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdaToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AGLStakingAddressChanged(address)"(
      _AGLStakingAddress?: null
    ): AGLStakingAddressChangedEventFilter;
    AGLStakingAddressChanged(
      _AGLStakingAddress?: null
    ): AGLStakingAddressChangedEventFilter;

    "BaseRateUpdated(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _baseRate?: null
    ): BaseRateUpdatedEventFilter;
    BaseRateUpdated(
      _asset?: PromiseOrValue<string> | null,
      _baseRate?: null
    ): BaseRateUpdatedEventFilter;

    "BorrowerOperationsAddressChanged(address)"(
      _newBorrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;
    BorrowerOperationsAddressChanged(
      _newBorrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;

    "CollSurplusPoolAddressChanged(address)"(
      _collSurplusPoolAddress?: null
    ): CollSurplusPoolAddressChangedEventFilter;
    CollSurplusPoolAddressChanged(
      _collSurplusPoolAddress?: null
    ): CollSurplusPoolAddressChangedEventFilter;

    "GasPoolAddressChanged(address)"(
      _gasPoolAddress?: null
    ): GasPoolAddressChangedEventFilter;
    GasPoolAddressChanged(
      _gasPoolAddress?: null
    ): GasPoolAddressChangedEventFilter;

    "LTermsUpdated(address,uint256,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _L_ETH?: null,
      _L_USDADebt?: null
    ): LTermsUpdatedEventFilter;
    LTermsUpdated(
      _asset?: PromiseOrValue<string> | null,
      _L_ETH?: null,
      _L_USDADebt?: null
    ): LTermsUpdatedEventFilter;

    "LastFeeOpTimeUpdated(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _lastFeeOpTime?: null
    ): LastFeeOpTimeUpdatedEventFilter;
    LastFeeOpTimeUpdated(
      _asset?: PromiseOrValue<string> | null,
      _lastFeeOpTime?: null
    ): LastFeeOpTimeUpdatedEventFilter;

    "Liquidation(address,uint256,uint256,uint256,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _liquidatedDebt?: null,
      _liquidatedColl?: null,
      _collGasCompensation?: null,
      _USDAGasCompensation?: null
    ): LiquidationEventFilter;
    Liquidation(
      _asset?: PromiseOrValue<string> | null,
      _liquidatedDebt?: null,
      _liquidatedColl?: null,
      _collGasCompensation?: null,
      _USDAGasCompensation?: null
    ): LiquidationEventFilter;

    "Redemption(address,uint256,uint256,uint256,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _attemptedAGLmount?: null,
      _actualAGLmount?: null,
      _AssetSent?: null,
      _AssetFee?: null
    ): RedemptionEventFilter;
    Redemption(
      _asset?: PromiseOrValue<string> | null,
      _attemptedAGLmount?: null,
      _actualAGLmount?: null,
      _AssetSent?: null,
      _AssetFee?: null
    ): RedemptionEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _sortedTrovesAddress?: null
    ): SortedTrovesAddressChangedEventFilter;

    "StabilityPoolManagerAddressChanged(address)"(
      _stabilityPoolManagerAddress?: null
    ): StabilityPoolManagerAddressChangedEventFilter;
    StabilityPoolManagerAddressChanged(
      _stabilityPoolManagerAddress?: null
    ): StabilityPoolManagerAddressChangedEventFilter;

    "SystemSnapshotsUpdated(address,uint256,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _totalStakesSnapshot?: null,
      _totalCollateralSnapshot?: null
    ): SystemSnapshotsUpdatedEventFilter;
    SystemSnapshotsUpdated(
      _asset?: PromiseOrValue<string> | null,
      _totalStakesSnapshot?: null,
      _totalCollateralSnapshot?: null
    ): SystemSnapshotsUpdatedEventFilter;

    "SystemUnpaidInterestUpdated(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      unpaidInterest?: null
    ): SystemUnpaidInterestUpdatedEventFilter;
    SystemUnpaidInterestUpdated(
      _asset?: PromiseOrValue<string> | null,
      unpaidInterest?: null
    ): SystemUnpaidInterestUpdatedEventFilter;

    "TotalStakesUpdated(address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _newTotalStakes?: null
    ): TotalStakesUpdatedEventFilter;
    TotalStakesUpdated(
      _asset?: PromiseOrValue<string> | null,
      _newTotalStakes?: null
    ): TotalStakesUpdatedEventFilter;

    "TroveIndexUpdated(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: null,
      _newIndex?: null
    ): TroveIndexUpdatedEventFilter;
    TroveIndexUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: null,
      _newIndex?: null
    ): TroveIndexUpdatedEventFilter;

    "TroveLiquidated(address,address,uint256,uint256,uint8)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      operation?: null
    ): TroveLiquidatedEventFilter;
    TroveLiquidated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      operation?: null
    ): TroveLiquidatedEventFilter;

    "TroveSnapshotsUpdated(address,uint256,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _L_ETH?: null,
      _L_USDADebt?: null
    ): TroveSnapshotsUpdatedEventFilter;
    TroveSnapshotsUpdated(
      _asset?: PromiseOrValue<string> | null,
      _L_ETH?: null,
      _L_USDADebt?: null
    ): TroveSnapshotsUpdatedEventFilter;

    "TroveUpdated(address,address,uint256,uint256,uint256,uint8)"(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TroveUpdatedEventFilter;
    TroveUpdated(
      _asset?: PromiseOrValue<string> | null,
      _borrower?: PromiseOrValue<string> | null,
      _debt?: null,
      _coll?: null,
      stake?: null,
      operation?: null
    ): TroveUpdatedEventFilter;

    "USDATokenAddressChanged(address)"(
      _USDATokenAddress?: null
    ): USDATokenAddressChangedEventFilter;
    USDATokenAddressChanged(
      _USDATokenAddress?: null
    ): USDATokenAddressChangedEventFilter;

    "VaultParametersBaseChanged(address)"(
      newAddress?: PromiseOrValue<string> | null
    ): VaultParametersBaseChangedEventFilter;
    VaultParametersBaseChanged(
      newAddress?: PromiseOrValue<string> | null
    ): VaultParametersBaseChangedEventFilter;

    "VaultUnpaidInterestUpdated(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _vault?: PromiseOrValue<string> | null,
      unpaidInterest?: null
    ): VaultUnpaidInterestUpdatedEventFilter;
    VaultUnpaidInterestUpdated(
      _asset?: PromiseOrValue<string> | null,
      _vault?: PromiseOrValue<string> | null,
      unpaidInterest?: null
    ): VaultUnpaidInterestUpdatedEventFilter;
  };

  estimateGas: {
    Troves(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTroveOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aglParams(overrides?: CallOverrides): Promise<BigNumber>;

    aglStaking(overrides?: CallOverrides): Promise<BigNumber>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchLiquidateTroves(
      _asset: PromiseOrValue<string>,
      _troveArray: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeTroveByRedemptor(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decayBaseRateFromBorrowing(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decreaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowingRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingUSDADebtReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemTotalUnpaidInterest(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveFromTroveOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveOwnersCount(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaidInterestOfUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      _asset: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateTroves(
      _asset: PromiseOrValue<string>,
      _n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTroveCollAndDebt(
      _borrower: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stabilityPoolManager(overrides?: CallOverrides): Promise<BigNumber>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _ETHDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalUSDASupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTroveRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdaToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Troves(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTroveOwnerToArray(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aglParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aglStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applyPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchLiquidateTroves(
      _asset: PromiseOrValue<string>,
      _troveArray: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkRecoveryMode(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTrove(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeTroveByRedemptor(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decayBaseRateFromBorrowing(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decreaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collDecrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowingFee(
      _asset: PromiseOrValue<string>,
      USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowingFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _USDADebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowingRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowingRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntireDebtAndColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNominalICR(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAssetReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingUSDADebtReward(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionFee(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionFeeWithDecay(
      _asset: PromiseOrValue<string>,
      _assetDraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionRate(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionRateWithDecay(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemTotalUnpaidInterest(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTCR(
      _asset: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveFromTroveOwnersArray(
      _asset: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveOwnersCount(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpaidInterestOfUser(
      _asset: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPendingRewards(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseTroveColl(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _collIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseTroveDebt(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _debtIncrease: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _asset: PromiseOrValue<string>,
      borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateTroves(
      _asset: PromiseOrValue<string>,
      _n: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeStake(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTroveCollAndDebt(
      _borrower: PromiseOrValue<string>,
      _asset: PromiseOrValue<string>,
      _newDebt: PromiseOrValue<BigNumberish>,
      _newColl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTroveStatus(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      num: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stabilityPoolManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBaseRateFromRedemption(
      _asset: PromiseOrValue<string>,
      _ETHDrawn: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _totalUSDASupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStakeAndTotalStakes(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTroveRewardSnapshots(
      _asset: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
