/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISortedTrovesInterface extends utils.Interface {
  functions: {
    "contains(address,address)": FunctionFragment;
    "findInsertPosition(address,uint256,address,address)": FunctionFragment;
    "getFirst(address)": FunctionFragment;
    "getLast(address)": FunctionFragment;
    "getMaxSize(address)": FunctionFragment;
    "getNext(address,address)": FunctionFragment;
    "getPrev(address,address)": FunctionFragment;
    "getSize(address)": FunctionFragment;
    "insert(address,address,uint256,address,address)": FunctionFragment;
    "isEmpty(address)": FunctionFragment;
    "isFull(address)": FunctionFragment;
    "reInsert(address,address,uint256,address,address)": FunctionFragment;
    "remove(address,address)": FunctionFragment;
    "setParams(address,address)": FunctionFragment;
    "validInsertPosition(address,uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "contains"
      | "findInsertPosition"
      | "getFirst"
      | "getLast"
      | "getMaxSize"
      | "getNext"
      | "getPrev"
      | "getSize"
      | "insert"
      | "isEmpty"
      | "isFull"
      | "reInsert"
      | "remove"
      | "setParams"
      | "validInsertPosition"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contains",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "findInsertPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirst",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLast",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrev",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmpty",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFull",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reInsert",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validInsertPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findInsertPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFirst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMaxSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reInsert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validInsertPosition",
    data: BytesLike
  ): Result;

  events: {
    "BorrowerOperationsAddressChanged(address)": EventFragment;
    "NodeAdded(address,address,uint256)": EventFragment;
    "NodeRemoved(address,address)": EventFragment;
    "SortedTrovesAddressChanged(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BorrowerOperationsAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SortedTrovesAddressChanged"): EventFragment;
}

export interface BorrowerOperationsAddressChangedEventObject {
  _borrowerOperationsAddress: string;
}
export type BorrowerOperationsAddressChangedEvent = TypedEvent<
  [string],
  BorrowerOperationsAddressChangedEventObject
>;

export type BorrowerOperationsAddressChangedEventFilter =
  TypedEventFilter<BorrowerOperationsAddressChangedEvent>;

export interface NodeAddedEventObject {
  _asset: string;
  _id: string;
  _NICR: BigNumber;
}
export type NodeAddedEvent = TypedEvent<
  [string, string, BigNumber],
  NodeAddedEventObject
>;

export type NodeAddedEventFilter = TypedEventFilter<NodeAddedEvent>;

export interface NodeRemovedEventObject {
  _asset: string;
  _id: string;
}
export type NodeRemovedEvent = TypedEvent<
  [string, string],
  NodeRemovedEventObject
>;

export type NodeRemovedEventFilter = TypedEventFilter<NodeRemovedEvent>;

export interface SortedTrovesAddressChangedEventObject {
  _sortedDoublyLLAddress: string;
}
export type SortedTrovesAddressChangedEvent = TypedEvent<
  [string],
  SortedTrovesAddressChangedEventObject
>;

export type SortedTrovesAddressChangedEventFilter =
  TypedEventFilter<SortedTrovesAddressChangedEvent>;

export interface ISortedTroves extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISortedTrovesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _TroveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  contains(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  findInsertPosition(
    _asset: PromiseOrValue<string>,
    _ICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getFirst(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLast(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMaxSize(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNext(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrev(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSize(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  insert(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    _ICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isEmpty(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFull(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  reInsert(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    _newICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove(
    _asset: PromiseOrValue<string>,
    _id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _TroveManagerAddress: PromiseOrValue<string>,
    _borrowerOperationsAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validInsertPosition(
    _asset: PromiseOrValue<string>,
    _ICR: PromiseOrValue<BigNumberish>,
    _prevId: PromiseOrValue<string>,
    _nextId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      _TroveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BorrowerOperationsAddressChanged(address)"(
      _borrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;
    BorrowerOperationsAddressChanged(
      _borrowerOperationsAddress?: null
    ): BorrowerOperationsAddressChangedEventFilter;

    "NodeAdded(address,address,uint256)"(
      _asset?: PromiseOrValue<string> | null,
      _id?: null,
      _NICR?: null
    ): NodeAddedEventFilter;
    NodeAdded(
      _asset?: PromiseOrValue<string> | null,
      _id?: null,
      _NICR?: null
    ): NodeAddedEventFilter;

    "NodeRemoved(address,address)"(
      _asset?: PromiseOrValue<string> | null,
      _id?: null
    ): NodeRemovedEventFilter;
    NodeRemoved(
      _asset?: PromiseOrValue<string> | null,
      _id?: null
    ): NodeRemovedEventFilter;

    "SortedTrovesAddressChanged(address)"(
      _sortedDoublyLLAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
    SortedTrovesAddressChanged(
      _sortedDoublyLLAddress?: null
    ): SortedTrovesAddressChangedEventFilter;
  };

  estimateGas: {
    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParams(
      _TroveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contains(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirst(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLast(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNext(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrev(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSize(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isEmpty(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFull(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reInsert(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      _newICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      _asset: PromiseOrValue<string>,
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _TroveManagerAddress: PromiseOrValue<string>,
      _borrowerOperationsAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validInsertPosition(
      _asset: PromiseOrValue<string>,
      _ICR: PromiseOrValue<BigNumberish>,
      _prevId: PromiseOrValue<string>,
      _nextId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
