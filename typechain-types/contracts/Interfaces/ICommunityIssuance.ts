/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICommunityIssuanceInterface extends utils.Interface {
  functions: {
    "addFundToStabilityPool(address,uint256)": FunctionFragment;
    "addFundToStabilityPoolFrom(address,uint256,address)": FunctionFragment;
    "issueAGL()": FunctionFragment;
    "sendAGL(address,uint256)": FunctionFragment;
    "setAddresses(address,address,address)": FunctionFragment;
    "setWeeklyAglDistribution(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFundToStabilityPool"
      | "addFundToStabilityPoolFrom"
      | "issueAGL"
      | "sendAGL"
      | "setAddresses"
      | "setWeeklyAglDistribution"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFundToStabilityPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFundToStabilityPoolFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "issueAGL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendAGL",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeeklyAglDistribution",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFundToStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFundToStabilityPoolFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issueAGL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendAGL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeeklyAglDistribution",
    data: BytesLike
  ): Result;

  events: {
    "AGLTokenAddressSet(address)": EventFragment;
    "StabilityPoolAddressSet(address)": EventFragment;
    "TotalAGLIssuedUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AGLTokenAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityPoolAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TotalAGLIssuedUpdated"): EventFragment;
}

export interface AGLTokenAddressSetEventObject {
  _AGLTokenAddress: string;
}
export type AGLTokenAddressSetEvent = TypedEvent<
  [string],
  AGLTokenAddressSetEventObject
>;

export type AGLTokenAddressSetEventFilter =
  TypedEventFilter<AGLTokenAddressSetEvent>;

export interface StabilityPoolAddressSetEventObject {
  _stabilityPoolAddress: string;
}
export type StabilityPoolAddressSetEvent = TypedEvent<
  [string],
  StabilityPoolAddressSetEventObject
>;

export type StabilityPoolAddressSetEventFilter =
  TypedEventFilter<StabilityPoolAddressSetEvent>;

export interface TotalAGLIssuedUpdatedEventObject {
  stabilityPool: string;
  _totalAGLIssued: BigNumber;
}
export type TotalAGLIssuedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  TotalAGLIssuedUpdatedEventObject
>;

export type TotalAGLIssuedUpdatedEventFilter =
  TypedEventFilter<TotalAGLIssuedUpdatedEvent>;

export interface ICommunityIssuance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICommunityIssuanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    issueAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _AGLTokenAddress: PromiseOrValue<string>,
      _stabilityPoolAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addFundToStabilityPool(
    _pool: PromiseOrValue<string>,
    _assignedSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFundToStabilityPoolFrom(
    _pool: PromiseOrValue<string>,
    _assignedSupply: PromiseOrValue<BigNumberish>,
    _spender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  issueAGL(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendAGL(
    _account: PromiseOrValue<string>,
    _aglAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _AGLTokenAddress: PromiseOrValue<string>,
    _stabilityPoolAddress: PromiseOrValue<string>,
    _adminContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWeeklyAglDistribution(
    _stabilityPool: PromiseOrValue<string>,
    _weeklyReward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    issueAGL(overrides?: CallOverrides): Promise<BigNumber>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _AGLTokenAddress: PromiseOrValue<string>,
      _stabilityPoolAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AGLTokenAddressSet(address)"(
      _AGLTokenAddress?: null
    ): AGLTokenAddressSetEventFilter;
    AGLTokenAddressSet(_AGLTokenAddress?: null): AGLTokenAddressSetEventFilter;

    "StabilityPoolAddressSet(address)"(
      _stabilityPoolAddress?: null
    ): StabilityPoolAddressSetEventFilter;
    StabilityPoolAddressSet(
      _stabilityPoolAddress?: null
    ): StabilityPoolAddressSetEventFilter;

    "TotalAGLIssuedUpdated(address,uint256)"(
      stabilityPool?: PromiseOrValue<string> | null,
      _totalAGLIssued?: null
    ): TotalAGLIssuedUpdatedEventFilter;
    TotalAGLIssuedUpdated(
      stabilityPool?: PromiseOrValue<string> | null,
      _totalAGLIssued?: null
    ): TotalAGLIssuedUpdatedEventFilter;
  };

  estimateGas: {
    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    issueAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _AGLTokenAddress: PromiseOrValue<string>,
      _stabilityPoolAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFundToStabilityPool(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFundToStabilityPoolFrom(
      _pool: PromiseOrValue<string>,
      _assignedSupply: PromiseOrValue<BigNumberish>,
      _spender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    issueAGL(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendAGL(
      _account: PromiseOrValue<string>,
      _aglAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _AGLTokenAddress: PromiseOrValue<string>,
      _stabilityPoolAddress: PromiseOrValue<string>,
      _adminContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWeeklyAglDistribution(
      _stabilityPool: PromiseOrValue<string>,
      _weeklyReward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
