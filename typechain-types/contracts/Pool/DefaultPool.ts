/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DefaultPoolInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "activePoolAddress()": FunctionFragment;
    "decreaseUSDADebt(address,uint256)": FunctionFragment;
    "getAssetBalance(address)": FunctionFragment;
    "getUSDADebt(address)": FunctionFragment;
    "increaseUSDADebt(address,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "owner()": FunctionFragment;
    "receivedERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendAssetToActivePool(address,uint256)": FunctionFragment;
    "setAddresses(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "troveManagerAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "activePoolAddress"
      | "decreaseUSDADebt"
      | "getAssetBalance"
      | "getUSDADebt"
      | "increaseUSDADebt"
      | "isInitialized"
      | "owner"
      | "receivedERC20"
      | "renounceOwnership"
      | "sendAssetToActivePool"
      | "setAddresses"
      | "transferOwnership"
      | "troveManagerAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseUSDADebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDADebt",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUSDADebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAssetToActivePool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddresses",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManagerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseUSDADebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDADebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUSDADebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendAssetToActivePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManagerAddress",
    data: BytesLike
  ): Result;

  events: {
    "ActivePoolAddressChanged(address)": EventFragment;
    "AssetAddressChanged(address)": EventFragment;
    "AssetBalanceUpdated(uint256)": EventFragment;
    "AssetSent(address,address,uint256)": EventFragment;
    "DefaultPoolAddressChanged(address)": EventFragment;
    "DefaultPoolAssetBalanceUpdated(address,uint256)": EventFragment;
    "DefaultPoolUSDADebtUpdated(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StabilityPoolAddressChanged(address)": EventFragment;
    "TroveManagerAddressChanged(address)": EventFragment;
    "USDABalanceUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivePoolAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetBalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DefaultPoolAssetBalanceUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultPoolUSDADebtUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StabilityPoolAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroveManagerAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDABalanceUpdated"): EventFragment;
}

export interface ActivePoolAddressChangedEventObject {
  _newActivePoolAddress: string;
}
export type ActivePoolAddressChangedEvent = TypedEvent<
  [string],
  ActivePoolAddressChangedEventObject
>;

export type ActivePoolAddressChangedEventFilter =
  TypedEventFilter<ActivePoolAddressChangedEvent>;

export interface AssetAddressChangedEventObject {
  _assetAddress: string;
}
export type AssetAddressChangedEvent = TypedEvent<
  [string],
  AssetAddressChangedEventObject
>;

export type AssetAddressChangedEventFilter =
  TypedEventFilter<AssetAddressChangedEvent>;

export interface AssetBalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type AssetBalanceUpdatedEvent = TypedEvent<
  [BigNumber],
  AssetBalanceUpdatedEventObject
>;

export type AssetBalanceUpdatedEventFilter =
  TypedEventFilter<AssetBalanceUpdatedEvent>;

export interface AssetSentEventObject {
  _to: string;
  _asset: string;
  _amount: BigNumber;
}
export type AssetSentEvent = TypedEvent<
  [string, string, BigNumber],
  AssetSentEventObject
>;

export type AssetSentEventFilter = TypedEventFilter<AssetSentEvent>;

export interface DefaultPoolAddressChangedEventObject {
  _newDefaultPoolAddress: string;
}
export type DefaultPoolAddressChangedEvent = TypedEvent<
  [string],
  DefaultPoolAddressChangedEventObject
>;

export type DefaultPoolAddressChangedEventFilter =
  TypedEventFilter<DefaultPoolAddressChangedEvent>;

export interface DefaultPoolAssetBalanceUpdatedEventObject {
  _asset: string;
  _balance: BigNumber;
}
export type DefaultPoolAssetBalanceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  DefaultPoolAssetBalanceUpdatedEventObject
>;

export type DefaultPoolAssetBalanceUpdatedEventFilter =
  TypedEventFilter<DefaultPoolAssetBalanceUpdatedEvent>;

export interface DefaultPoolUSDADebtUpdatedEventObject {
  _asset: string;
  _USDADebt: BigNumber;
}
export type DefaultPoolUSDADebtUpdatedEvent = TypedEvent<
  [string, BigNumber],
  DefaultPoolUSDADebtUpdatedEventObject
>;

export type DefaultPoolUSDADebtUpdatedEventFilter =
  TypedEventFilter<DefaultPoolUSDADebtUpdatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StabilityPoolAddressChangedEventObject {
  _newStabilityPoolAddress: string;
}
export type StabilityPoolAddressChangedEvent = TypedEvent<
  [string],
  StabilityPoolAddressChangedEventObject
>;

export type StabilityPoolAddressChangedEventFilter =
  TypedEventFilter<StabilityPoolAddressChangedEvent>;

export interface TroveManagerAddressChangedEventObject {
  _newTroveManagerAddress: string;
}
export type TroveManagerAddressChangedEvent = TypedEvent<
  [string],
  TroveManagerAddressChangedEventObject
>;

export type TroveManagerAddressChangedEventFilter =
  TypedEventFilter<TroveManagerAddressChangedEvent>;

export interface USDABalanceUpdatedEventObject {
  _newBalance: BigNumber;
}
export type USDABalanceUpdatedEvent = TypedEvent<
  [BigNumber],
  USDABalanceUpdatedEventObject
>;

export type USDABalanceUpdatedEventFilter =
  TypedEventFilter<USDABalanceUpdatedEvent>;

export interface DefaultPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DefaultPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    activePoolAddress(overrides?: CallOverrides): Promise<[string]>;

    decreaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUSDADebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendAssetToActivePool(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    troveManagerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  activePoolAddress(overrides?: CallOverrides): Promise<string>;

  decreaseUSDADebt(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAssetBalance(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUSDADebt(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseUSDADebt(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  receivedERC20(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendAssetToActivePool(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _troveManagerAddress: PromiseOrValue<string>,
    _activePoolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  troveManagerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    activePoolAddress(overrides?: CallOverrides): Promise<string>;

    decreaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDADebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendAssetToActivePool(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    troveManagerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ActivePoolAddressChanged(address)"(
      _newActivePoolAddress?: null
    ): ActivePoolAddressChangedEventFilter;
    ActivePoolAddressChanged(
      _newActivePoolAddress?: null
    ): ActivePoolAddressChangedEventFilter;

    "AssetAddressChanged(address)"(
      _assetAddress?: null
    ): AssetAddressChangedEventFilter;
    AssetAddressChanged(_assetAddress?: null): AssetAddressChangedEventFilter;

    "AssetBalanceUpdated(uint256)"(
      _newBalance?: null
    ): AssetBalanceUpdatedEventFilter;
    AssetBalanceUpdated(_newBalance?: null): AssetBalanceUpdatedEventFilter;

    "AssetSent(address,address,uint256)"(
      _to?: null,
      _asset?: PromiseOrValue<string> | null,
      _amount?: null
    ): AssetSentEventFilter;
    AssetSent(
      _to?: null,
      _asset?: PromiseOrValue<string> | null,
      _amount?: null
    ): AssetSentEventFilter;

    "DefaultPoolAddressChanged(address)"(
      _newDefaultPoolAddress?: null
    ): DefaultPoolAddressChangedEventFilter;
    DefaultPoolAddressChanged(
      _newDefaultPoolAddress?: null
    ): DefaultPoolAddressChangedEventFilter;

    "DefaultPoolAssetBalanceUpdated(address,uint256)"(
      _asset?: null,
      _balance?: null
    ): DefaultPoolAssetBalanceUpdatedEventFilter;
    DefaultPoolAssetBalanceUpdated(
      _asset?: null,
      _balance?: null
    ): DefaultPoolAssetBalanceUpdatedEventFilter;

    "DefaultPoolUSDADebtUpdated(address,uint256)"(
      _asset?: null,
      _USDADebt?: null
    ): DefaultPoolUSDADebtUpdatedEventFilter;
    DefaultPoolUSDADebtUpdated(
      _asset?: null,
      _USDADebt?: null
    ): DefaultPoolUSDADebtUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StabilityPoolAddressChanged(address)"(
      _newStabilityPoolAddress?: null
    ): StabilityPoolAddressChangedEventFilter;
    StabilityPoolAddressChanged(
      _newStabilityPoolAddress?: null
    ): StabilityPoolAddressChangedEventFilter;

    "TroveManagerAddressChanged(address)"(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;
    TroveManagerAddressChanged(
      _newTroveManagerAddress?: null
    ): TroveManagerAddressChangedEventFilter;

    "USDABalanceUpdated(uint256)"(
      _newBalance?: null
    ): USDABalanceUpdatedEventFilter;
    USDABalanceUpdated(_newBalance?: null): USDABalanceUpdatedEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    activePoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDADebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendAssetToActivePool(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    troveManagerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAssetBalance(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDADebt(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseUSDADebt(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedERC20(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendAssetToActivePool(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _troveManagerAddress: PromiseOrValue<string>,
      _activePoolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    troveManagerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
