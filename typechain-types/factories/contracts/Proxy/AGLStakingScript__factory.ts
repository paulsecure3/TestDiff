/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AGLStakingScript,
  AGLStakingScriptInterface,
} from "../../../contracts/Proxy/AGLStakingScript";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_AGLStakingAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_AGLamount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161024838038061024883398101604081905261002f916100f7565b61003881610049565b6001600160a01b0316608052610127565b6001600160a01b0381166100a45760405162461bcd60e51b815260206004820152601e60248201527f4163636f756e742063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b803b806100f35760405162461bcd60e51b815260206004820181905260248201527f4163636f756e7420636f64652073697a652063616e6e6f74206265207a65726f604482015260640161009b565b5050565b60006020828403121561010957600080fd5b81516001600160a01b038116811461012057600080fd5b9392505050565b6080516101076101416000396000605401526101076000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063a694fc3a14602d575b600080fd5b603c603836600460b9565b603e565b005b60405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b158015609f57600080fd5b505af115801560b2573d6000803e3d6000fd5b5050505050565b60006020828403121560ca57600080fd5b503591905056fea2646970667358221220a6d1a126f2f90305d762dfa2329406ec5f11145209cb762ae9d44b8f27db44f264736f6c63430008130033";

type AGLStakingScriptConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AGLStakingScriptConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AGLStakingScript__factory extends ContractFactory {
  constructor(...args: AGLStakingScriptConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _AGLStakingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AGLStakingScript> {
    return super.deploy(
      _AGLStakingAddress,
      overrides || {}
    ) as Promise<AGLStakingScript>;
  }
  override getDeployTransaction(
    _AGLStakingAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_AGLStakingAddress, overrides || {});
  }
  override attach(address: string): AGLStakingScript {
    return super.attach(address) as AGLStakingScript;
  }
  override connect(signer: Signer): AGLStakingScript__factory {
    return super.connect(signer) as AGLStakingScript__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AGLStakingScriptInterface {
    return new utils.Interface(_abi) as AGLStakingScriptInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AGLStakingScript {
    return new Contract(address, _abi, signerOrProvider) as AGLStakingScript;
  }
}
