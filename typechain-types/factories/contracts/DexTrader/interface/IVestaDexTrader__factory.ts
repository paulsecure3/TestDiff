/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IVestaDexTrader,
  IVestaDexTraderInterface,
} from "../../../../contracts/DexTrader/interface/IVestaDexTrader";

const _abi = [
  {
    inputs: [],
    name: "EmptyRequest",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minimumAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receivedAmount",
        type: "uint256",
      },
    ],
    name: "FailedToReceiveExactAmountOut",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTraderSelector",
    type: "error",
  },
  {
    inputs: [],
    name: "RoutingNotFound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "returnedCallData",
        type: "bytes",
      },
    ],
    name: "TraderFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maximumAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requestedAmountIn",
        type: "uint256",
      },
    ],
    name: "TraderFailedMaxAmountInExceeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    name: "RouteUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[2]",
        name: "tokenInOut",
        type: "address[2]",
      },
      {
        indexed: false,
        internalType: "uint256[2]",
        name: "amountInOut",
        type: "uint256[2]",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes16",
        name: "selector",
        type: "bytes16",
      },
    ],
    name: "TraderRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "TraderRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_firstTokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_firstAmountIn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes16",
            name: "traderSelector",
            type: "bytes16",
          },
          {
            internalType: "address[2]",
            name: "tokenInOut",
            type: "address[2]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ManualExchange[]",
        name: "_requests",
        type: "tuple[]",
      },
    ],
    name: "exchange",
    outputs: [
      {
        internalType: "uint256[]",
        name: "swapDatas_",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountOut",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes16",
            name: "traderSelector",
            type: "bytes16",
          },
          {
            internalType: "address[2]",
            name: "tokenInOut",
            type: "address[2]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ManualExchange[]",
        name: "_requests",
        type: "tuple[]",
      },
    ],
    name: "getAmountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes16",
            name: "traderSelector",
            type: "bytes16",
          },
          {
            internalType: "address[2]",
            name: "tokenInOut",
            type: "address[2]",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ManualExchange[]",
        name: "_requests",
        type: "tuple[]",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes16",
        name: "_selector",
        type: "bytes16",
      },
    ],
    name: "getTraderAddressWithSelector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
    ],
    name: "isRegisteredTrader",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IVestaDexTrader__factory {
  static readonly abi = _abi;
  static createInterface(): IVestaDexTraderInterface {
    return new utils.Interface(_abi) as IVestaDexTraderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IVestaDexTrader {
    return new Contract(address, _abi, signerOrProvider) as IVestaDexTrader;
  }
}
