/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CustomAggregator,
  CustomAggregatorInterface,
} from "../../../../contracts/Mock/AggregatorV3Mock.sol/CustomAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_uniswapOracle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "amountIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenIn",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenOut",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapOracle",
    outputs: [
      {
        internalType: "contract IUniswapV3Oracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103d93803806103d983398101604081905261002f91610090565b600080546001600160a01b03199081166001600160a01b03968716179091556001805482169486169490941790935560028054909316919093161790556003556100db565b80516001600160a01b038116811461008b57600080fd5b919050565b600080600080608085870312156100a657600080fd5b6100af85610074565b93506100bd60208601610074565b92506100cb60408601610074565b6060959095015193969295505050565b6102ef806100ea6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636daf390b116100665780636daf390b146100f15780637284e416146101045780639a6fc8f514610113578063d0202d3b14610166578063feaf968c1461017957600080fd5b8063120c6c5b14610098578063313ce567146100c857806354fd4d50146100d75780636bed55a6146100e8575b600080fd5b6000546100ab906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b604051600081526020016100bf565b60005b6040519081526020016100bf565b6100da60035481565b6001546100ab906001600160a01b031681565b60606040516100bf919061021f565b61012f61012136600461026d565b506000908190819081908190565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100bf565b6002546100ab906001600160a01b031681565b61012f60008054600154600354600254604051632321bc7960e21b81526001600160a01b039384166004820152602481019290925282166044820152839283928392839283921690638c86f1e490606401602060405180830381865afa1580156101e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b91906102a0565b600197909650429550859450879350915050565b600060208083528351808285015260005b8181101561024c57858101830151858201604001528201610230565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561027f57600080fd5b813569ffffffffffffffffffff8116811461029957600080fd5b9392505050565b6000602082840312156102b257600080fd5b505191905056fea2646970667358221220d362ad4cd30a29b02f67ed392548dc105b84dd48922c6542cc6befe4f3ad2d0e64736f6c63430008130033";

type CustomAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CustomAggregator__factory extends ContractFactory {
  constructor(...args: CustomAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _uniswapOracle: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CustomAggregator> {
    return super.deploy(
      _uniswapOracle,
      _tokenIn,
      _tokenOut,
      _amountIn,
      overrides || {}
    ) as Promise<CustomAggregator>;
  }
  override getDeployTransaction(
    _uniswapOracle: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _uniswapOracle,
      _tokenIn,
      _tokenOut,
      _amountIn,
      overrides || {}
    );
  }
  override attach(address: string): CustomAggregator {
    return super.attach(address) as CustomAggregator;
  }
  override connect(signer: Signer): CustomAggregator__factory {
    return super.connect(signer) as CustomAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomAggregatorInterface {
    return new utils.Interface(_abi) as CustomAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CustomAggregator {
    return new Contract(address, _abi, signerOrProvider) as CustomAggregator;
  }
}
