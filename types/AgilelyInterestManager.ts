/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AgilelyInterestManagerInterface extends utils.Interface {
  contractName: "AgilelyInterestManager";
  functions: {
    "decreaseDebt(address,address,uint256)": FunctionFragment;
    "exit(address,address)": FunctionFragment;
    "getInterestModule(address)": FunctionFragment;
    "getLastUSDAPrice()": FunctionFragment;
    "getModules()": FunctionFragment;
    "getUserDebt(address,address)": FunctionFragment;
    "increaseDebt(address,address,uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safetyVault()": FunctionFragment;
    "setModuleFor(address,address)": FunctionFragment;
    "setSafetyVault(address)": FunctionFragment;
    "setUp(address,address,address,address,address)": FunctionFragment;
    "syncWithProtocol(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "troveManager()": FunctionFragment;
    "updateModules()": FunctionFragment;
    "usda()": FunctionFragment;
    "usdaOperator()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreaseDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUSDAPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDebt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseDebt",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safetyVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setModuleFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafetyVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "syncWithProtocol",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "troveManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateModules",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usda", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdaOperator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterestModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUSDAPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safetyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModuleFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafetyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncWithProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "troveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usda", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdaOperator",
    data: BytesLike
  ): Result;

  events: {
    "DebtChanged(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InterestMinted(address,uint256)": EventFragment;
    "ModuleLinked(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DebtChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterestMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type DebtChangedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; user: string; newDebt: BigNumber }
>;

export type DebtChangedEventFilter = TypedEventFilter<DebtChangedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type InterestMintedEvent = TypedEvent<
  [string, BigNumber],
  { module: string; interestMinted: BigNumber }
>;

export type InterestMintedEventFilter = TypedEventFilter<InterestMintedEvent>;

export type ModuleLinkedEvent = TypedEvent<
  [string, string],
  { token: string; module: string }
>;

export type ModuleLinkedEventFilter = TypedEventFilter<ModuleLinkedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AgilelyInterestManager extends BaseContract {
  contractName: "AgilelyInterestManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgilelyInterestManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decreaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      _token: string,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInterestModule(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastUSDAPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getModules(overrides?: CallOverrides): Promise<[string[]]>;

    getUserDebt(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentDebt_: BigNumber;
        pendingInterest_: BigNumber;
      }
    >;

    increaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safetyVault(overrides?: CallOverrides): Promise<[string]>;

    setModuleFor(
      _token: string,
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSafetyVault(
      _newSafetyVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp(
      _usda: string,
      _troveManager: string,
      _priceFeed: string,
      _usdaOperator: string,
      _safetyVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncWithProtocol(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    troveManager(overrides?: CallOverrides): Promise<[string]>;

    updateModules(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usda(overrides?: CallOverrides): Promise<[string]>;

    usdaOperator(overrides?: CallOverrides): Promise<[string]>;
  };

  decreaseDebt(
    _token: string,
    _user: string,
    _debt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    _token: string,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInterestModule(_token: string, overrides?: CallOverrides): Promise<string>;

  getLastUSDAPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getModules(overrides?: CallOverrides): Promise<string[]>;

  getUserDebt(
    _token: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentDebt_: BigNumber;
      pendingInterest_: BigNumber;
    }
  >;

  increaseDebt(
    _token: string,
    _user: string,
    _debt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safetyVault(overrides?: CallOverrides): Promise<string>;

  setModuleFor(
    _token: string,
    _module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSafetyVault(
    _newSafetyVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp(
    _usda: string,
    _troveManager: string,
    _priceFeed: string,
    _usdaOperator: string,
    _safetyVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncWithProtocol(
    _assets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  troveManager(overrides?: CallOverrides): Promise<string>;

  updateModules(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usda(overrides?: CallOverrides): Promise<string>;

  usdaOperator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    decreaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exit(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestModule(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastUSDAPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getModules(overrides?: CallOverrides): Promise<string[]>;

    getUserDebt(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentDebt_: BigNumber;
        pendingInterest_: BigNumber;
      }
    >;

    increaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safetyVault(overrides?: CallOverrides): Promise<string>;

    setModuleFor(
      _token: string,
      _module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafetyVault(
      _newSafetyVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      _usda: string,
      _troveManager: string,
      _priceFeed: string,
      _usdaOperator: string,
      _safetyVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    syncWithProtocol(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    troveManager(overrides?: CallOverrides): Promise<string>;

    updateModules(overrides?: CallOverrides): Promise<void>;

    usda(overrides?: CallOverrides): Promise<string>;

    usdaOperator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DebtChanged(address,address,uint256)"(
      token?: string | null,
      user?: string | null,
      newDebt?: null
    ): DebtChangedEventFilter;
    DebtChanged(
      token?: string | null,
      user?: string | null,
      newDebt?: null
    ): DebtChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterestMinted(address,uint256)"(
      module?: string | null,
      interestMinted?: null
    ): InterestMintedEventFilter;
    InterestMinted(
      module?: string | null,
      interestMinted?: null
    ): InterestMintedEventFilter;

    "ModuleLinked(address,address)"(
      token?: string | null,
      module?: string | null
    ): ModuleLinkedEventFilter;
    ModuleLinked(
      token?: string | null,
      module?: string | null
    ): ModuleLinkedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    decreaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      _token: string,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInterestModule(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUSDAPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getModules(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDebt(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safetyVault(overrides?: CallOverrides): Promise<BigNumber>;

    setModuleFor(
      _token: string,
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSafetyVault(
      _newSafetyVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp(
      _usda: string,
      _troveManager: string,
      _priceFeed: string,
      _usdaOperator: string,
      _safetyVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncWithProtocol(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    troveManager(overrides?: CallOverrides): Promise<BigNumber>;

    updateModules(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usda(overrides?: CallOverrides): Promise<BigNumber>;

    usdaOperator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      _token: string,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInterestModule(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUSDAPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDebt(
      _token: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseDebt(
      _token: string,
      _user: string,
      _debt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safetyVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setModuleFor(
      _token: string,
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSafetyVault(
      _newSafetyVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      _usda: string,
      _troveManager: string,
      _priceFeed: string,
      _usdaOperator: string,
      _safetyVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncWithProtocol(
      _assets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    troveManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateModules(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usda(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdaOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
